{
  "address": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        }
      ],
      "name": "deployContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
    "transactionIndex": 3,
    "gasUsed": "5292408",
    "logsBloom": "0x
    "blockHash": "0xb452304b2d6959c83c4df46ecca3594150fda00318a5561a92e18cda3d9caef0",
    "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 23797825,
        "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
        "address": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xb452304b2d6959c83c4df46ecca3594150fda00318a5561a92e18cda3d9caef0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23797825,
        "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
        "address": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a73",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb452304b2d6959c83c4df46ecca3594150fda00318a5561a92e18cda3d9caef0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23797825,
        "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
        "address": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xb452304b2d6959c83c4df46ecca3594150fda00318a5561a92e18cda3d9caef0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23797825,
        "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
        "address": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xb452304b2d6959c83c4df46ecca3594150fda00318a5561a92e18cda3d9caef0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 23797825,
        "transactionHash": "0x44c8c94050064746cee6244b244474ad32bd09155d5a3dd6073c4b821e6496b8",
        "address": "0x2e2d92118fc3d050F4D5877969fFd7Eb0b244A2b",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a73",
          "0x000000000000000000000000fab4b835fbfc671c15e2fde237c625e82612893f",
          "0x000000000000000000000000ec30759d0a3f3ce0a730920dc29d74e441f492c3"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xb452304b2d6959c83c4df46ecca3594150fda00318a5561a92e18cda3d9caef0"
      }
    ],
    "blockNumber": 23797825,
    "cumulativeGasUsed": "5663454",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfaB4B835fBFC671c15e2fDe237c625e82612893F"
  ],
  "numDeployments": 6,
  "solcInputHash": "9aef333d3173362fcd694d175657a2fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"deployContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"factoryAddress\":\"Address of the factory able to call the deploy function\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Factory Constructor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory/RAIR721_Deployer.sol\":\"RAIR721_Deployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/Factory/RAIR721_Deployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\n// Parents\\nimport \\\"openzeppelin-v4.7.1/access/AccessControlEnumerable.sol\\\";\\nimport \\\"../Tokens/RAIR721_Contract.sol\\\";\\n\\ninterface IRAIR721_Deployer {\\n    function deployContract(address creator, string calldata title)\\n        external\\n        returns (address deploymentAddress);\\n}\\n\\n// @title   RAIR ERC721 Deployer\\n// @notice  This contract is in charge of the deployment of the ERC721 RAIR Tokens\\n// @dev     This contract should be called by the master factory\\ncontract RAIR721_Deployer is IRAIR721_Deployer, AccessControlEnumerable {\\n    bytes32 public constant MAINTAINER = keccak256(\\\"MAINTAINER\\\");\\n    bytes32 public constant FACTORY = keccak256(\\\"FACTORY\\\");\\n\\n    /// @notice Factory Constructor\\n    /// @param  factoryAddress \\t\\tAddress of the factory able to call the deploy function\\n    constructor(address factoryAddress) {\\n        _setRoleAdmin(MAINTAINER, MAINTAINER);\\n        _setRoleAdmin(FACTORY, MAINTAINER);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MAINTAINER, msg.sender);\\n        _setupRole(FACTORY, factoryAddress);\\n    }\\n\\n    // @notice  Deploys the RAIR721 contracts\\n    // @dev     Can only be called by a FACTORY\\n    // @param   creator Contains the address of the sender of the ERC777 tokens\\n    // @param   title   Contains the name of the contract deployment\\n    function deployContract(address creator, string calldata title)\\n        external\\n        override\\n        onlyRole(FACTORY)\\n        returns (address deploymentAddress)\\n    {\\n        RAIR721_Contract newToken = new RAIR721_Contract(title, creator);\\n        return address(newToken);\\n    }\\n}\\n\",\"keccak256\":\"0x3ef3376abab39918725b9259e9506efb567c8b98986ca5ef2c6f0de13fc3ab0d\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10; \\n\\ninterface IERC2981 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256,bytes)\\\")) == 0xc155531d\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0xc155531d;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _value sale price\\n    function royaltyInfo(\\n    \\tuint256 _tokenId,\\n    \\tuint256 _salePrice)\\n    external returns (\\n    \\taddress receiver,\\n    \\tuint256 royaltyAmount);\\n\\n    /// @notice Informs callers that this contract supports ERC2981\\n    /// @dev If `_registerInterface(_INTERFACE_ID_ERC2981)` is called\\n    ///      in the initializer, this should be automatic\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements\\n    ///         `_INTERFACE_ID_ERC2981` and `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\",\"keccak256\":\"0x55209767959f59149522aab059c397444a37dc66f38216c3dce269d723a76325\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/IRAIR721_Contract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"openzeppelin-v4.7.1/token/ERC721/IERC721.sol\\\";\\n\\ninterface IRAIR721_Contract is IERC721 {\\n    struct range {\\n        uint rangeStart;\\n        uint rangeEnd;\\n        uint tokensAllowed;\\n        uint mintableTokens;\\n        uint lockedTokens;\\n        uint rangePrice;\\n        string rangeName;\\n    }\\n\\n    struct collection {\\n        uint startingToken;\\n        uint endingToken;\\n        string name;\\n        uint[] rangeList;\\n    }\\n\\n    event CreatedCollection(\\n        uint indexed collectionIndex,\\n        string collectionName,\\n        uint startingToken,\\n        uint collectionLength\\n    );\\n\\n    event CreatedRange(\\n        uint collectionIndex,\\n        uint start,\\n        uint end,\\n        uint price,\\n        uint tokensAllowed,\\n        uint lockedTokens,\\n        string name,\\n        uint rangeIndex\\n    );\\n    event UpdatedRange(\\n        uint rangeIndex,\\n        string name,\\n        uint price,\\n        uint tokensAllowed,\\n        uint lockedTokens\\n    );\\n    event TradingLocked(\\n        uint indexed rangeIndex,\\n        uint from,\\n        uint to,\\n        uint lockedTokens\\n    );\\n    event TradingUnlocked(uint indexed rangeIndex, uint from, uint to);\\n\\n    event UpdatedBaseURI(string newURI, bool appendTokenIndex, string _metadataExtension);\\n    event UpdatedTokenURI(uint tokenId, string newURI);\\n    event UpdatedProductURI(\\n        uint productId,\\n        string newURI,\\n        bool appendTokenIndex,\\n        string _metadataExtension\\n    );\\n    event UpdatedRangeURI(\\n        uint rangeId,\\n        string newURI,\\n        bool appendTokenIndex,\\n        string _metadataExtension\\n    );\\n    event UpdatedURIExtension(string newExtension);\\n    event UpdatedContractURI(string newURI);\\n\\n    // For OpenSea's Freezing\\n    event PermanentURI(string _value, uint256 indexed _id);\\n\\n    // Get the total number of collections in the contract\\n    function getCollectionCount() external view returns (uint);\\n\\n    // Get a specific collection in the contract\\n    function getCollection(uint collectionIndex)\\n        external\\n        view\\n        returns (collection memory);\\n\\n    function rangeInfo(uint rangeIndex)\\n        external\\n        view\\n        returns (range memory data, uint collectionIndex);\\n\\n    // Mint a token inside a collection\\n    function mintFromRange(\\n        address to,\\n        uint collectionID,\\n        uint index\\n    ) external;\\n\\n    // Ask for the royalty info of the creator\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x87c56d8ac6c008496f0f97708dfe41181494842012904dc9735c2dd063dc675f\",\"license\":\"GPL-3.0\"},\"contracts/Tokens/RAIR721_Contract.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.17;\\n\\nimport \\\"openzeppelin-v4.7.1/token/ERC721/ERC721.sol\\\";\\nimport \\\"openzeppelin-v4.7.1/access/AccessControl.sol\\\";\\nimport \\\"openzeppelin-v4.7.1/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"openzeppelin-v4.7.1/utils/Strings.sol\\\";\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./IRAIR721_Contract.sol\\\";\\n\\n/// @title  Extended ERC721 contract for the RAIR system\\n/// @notice Uses ERC2981 and ERC165 for standard royalty info\\n/// @notice Uses AccessControl for the minting mechanisms\\n/// @author Juan M. Sanchez M.\\n/// @dev    Ideally generated by a RAIR Token Factory\\ncontract RAIR721_Contract is\\n    IERC2981,\\n    ERC165,\\n    IRAIR721_Contract,\\n    ERC721,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    // Allows the conversion of numbers to strings (used in the token URI functions)\\n    using Strings for uint;\\n\\n    // Auxiliary struct used to avoid Stack too deep errors\\n    struct rangeData {\\n        uint rangeLength;\\n        uint price;\\n        uint tokensAllowed;\\n        uint lockedTokens;\\n        string name;\\n    }\\n\\n    mapping(uint => uint) public tokenToRange;\\n    mapping(uint => uint) public rangeToCollection;\\n\\n    //URIs\\n    mapping(uint => string) internal uniqueTokenURI;\\n    mapping(uint => string) internal collectionURI;\\n    mapping(uint => string) internal rangeURI;\\n    mapping(uint => bool) internal appendTokenIndexToCollectionURI;\\n    mapping(uint => bool) internal appendTokenIndexToRangeURI;\\n\\n    string internal baseURI;\\n    string internal contractMetadataURI;\\n\\n    bool appendTokenIndexToContractURI;\\n    bool _requireTrader;\\n\\n    range[] private _ranges;\\n    collection[] private _collections;\\n\\n    // Roles\\n    bytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n    bytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\n    address public owner;\\n    address public factory;\\n    string private _symbol;\\n    uint16 private _royaltyFee;\\n    string private _metadataExtension;\\n\\n    /// @notice\\tMakes sure the collection exists before doing changes to it\\n    /// @param\\tcollectionID\\tCollection to verify\\n    modifier collectionExists(uint collectionID) {\\n        require(\\n            _collections.length > collectionID,\\n            \\\"RAIR ERC721: Collection does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice\\tMakes sure the range exists\\n    /// @param\\trangeIndex\\tRange to verify\\n    modifier rangeExists(uint rangeIndex) {\\n        require(\\n            _ranges.length > rangeIndex,\\n            \\\"RAIR ERC721: Range does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice\\tSets up the role system from AccessControl\\n    /// @dev\\tRAIR is the default symbol for the token, this can be updated with setTokenSymbol\\n    /// @param\\t_contractName\\tName of the contract\\n    /// @param\\t_creatorAddress\\tAddress of the creator of the contract\\n    constructor(string memory _contractName, address _creatorAddress)\\n        ERC721(_contractName, \\\"RAIR\\\")\\n    {\\n        factory = msg.sender;\\n        _symbol = \\\"RAIR\\\";\\n        _royaltyFee = 30000;\\n        _setupRole(DEFAULT_ADMIN_ROLE, _creatorAddress);\\n        _setupRole(MINTER, _creatorAddress);\\n        _setupRole(TRADER, _creatorAddress);\\n        _requireTrader = false;\\n        owner = _creatorAddress;\\n    }\\n\\n    /// @notice  Updates the metadata extension added at the end of all tokens\\n    /// @dev     Must include the . before the extension\\n    /// @param extension     Extension to be added at the end of all contract wide tokens\\n    function setMetadataExtension(string calldata extension) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(extension)[0] == '.', \\\"RAIR ERC721: Extension must start with a '.'\\\");\\n        _metadataExtension = extension;\\n        emit UpdatedURIExtension(_metadataExtension);\\n    }\\n\\n    /// @notice \\tTransfers the ownership of a contract to a new address\\n    /// @param \\tnewOwner \\tAddress of the new owner of the contract\\n    function transferOwnership(address newOwner)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        owner = newOwner;\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @notice \\tUpdates the royalty fee used by the 2981 standard\\n    /// @param \\tnewRoyalty \\tPercentage that should be sent to the owner of the contract (3 decimals, 30% = 30000)\\n    function setRoyaltyFee(uint16 newRoyalty)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _royaltyFee = newRoyalty;\\n    }\\n\\n    /// @notice \\tUpdates the token symbol\\n    /// @param \\tnewSymbol \\tNew symbol to be returned from the symbol() function\\n    function setTokenSymbol(string calldata newSymbol)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _symbol = newSymbol;\\n    }\\n\\n    /// @notice \\tReturns the symbol for this contract\\n    /// @dev \\tBy default, the symbol is RAIR\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @notice \\tEnables or disables the requirement of the TRADER role to do NFT transfers\\n    function requireTraderRole(bool required) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _requireTrader = required;\\n    }\\n\\n    /// @notice \\tEmits an event that OpenSea recognizes as a signal to never update the metadata for this token\\n    /// @dev \\tThe metadata can still be updated, but OpenSea won't update it on their platform\\n    /// @param \\ttokenId \\tIdentifier of the token to be frozen\\n    function freezeMetadataOpensea(uint tokenId) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        emit PermanentURI(tokenURI(tokenId), tokenId);\\n    }\\n\\n    /// @notice \\tUpdates the URL that OpenSea uses to fetch the contract's metadata\\n    /// @param \\tnewURI \\tURL of the metadata for the token\\n    function setContractURI(string calldata newURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        contractMetadataURI = newURI;\\n        emit UpdatedContractURI(newURI);\\n    }\\n\\n    /// @notice \\tReturns the metadata for the entire contract\\n    /// @dev \\tNot the NFTs, this is information about the contract itself\\n    function contractURI() public view returns (string memory) {\\n        return contractMetadataURI;\\n    }\\n\\n    /// @notice\\tSets the Base URI for ALL tokens\\n    /// @dev\\tCan be overriden by the collection-wide URI or the specific token URI\\n    /// @param\\tnewURI\\tURI to be used\\n    function setBaseURI(string calldata newURI, bool appendTokenIndex)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        baseURI = newURI;\\n        appendTokenIndexToContractURI = appendTokenIndex;\\n        emit UpdatedBaseURI(newURI, appendTokenIndex, _metadataExtension);\\n    }\\n\\n    /// @notice\\tOverridden function from the ERC721 contract that returns our\\n    ///\\t\\t\\tvariable base URI instead of the hardcoded URI\\n    function _baseURI() internal view override(ERC721) returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /// @notice\\tUpdates the unique URI of a token, but in a single transaction\\n    /// @dev\\tUses the single function so it also emits an event\\n    /// @param\\ttokenIds\\tToken Indexes that will be given an URI\\n    /// @param\\tnewURIs\\t\\tNew URIs to be set\\n    function setUniqueURIBatch(\\n        uint[] calldata tokenIds,\\n        string[] calldata newURIs\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(\\n            tokenIds.length == newURIs.length,\\n            \\\"RAIR ERC721: Token IDs and URIs should have the same length\\\"\\n        );\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            setUniqueURI(tokenIds[i], newURIs[i]);\\n        }\\n    }\\n\\n    /// @notice\\tGives an individual token an unique URI\\n    /// @dev\\tEmits an event so there's provenance\\n    /// @param\\ttokenId\\tToken Index that will be given an URI\\n    /// @param\\tnewURI\\tNew URI to be given\\n    function setUniqueURI(uint tokenId, string calldata newURI)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        uniqueTokenURI[tokenId] = newURI;\\n        emit UpdatedTokenURI(tokenId, newURI);\\n    }\\n\\n    /// @notice\\tGives all tokens within a range a specific URI\\n    /// @dev\\tEmits an event so there's provenance\\n    /// @param\\trangeId\\tToken Index that will be given an URI\\n    /// @param\\tnewURI\\t\\t    New URI to be given\\n    function setRangeURI(\\n        uint rangeId,\\n        string calldata newURI,\\n        bool appendTokenIndex\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        rangeURI[rangeId] = newURI;\\n        appendTokenIndexToRangeURI[rangeId] = appendTokenIndex;\\n        emit UpdatedRangeURI(rangeId, newURI, appendTokenIndex, _metadataExtension);\\n    }\\n\\n    /// @notice\\tGives all tokens within a collection a specific URI\\n    /// @dev\\tEmits an event so there's provenance\\n    /// @param\\tcollectionId\\tToken Index that will be given an URI\\n    /// @param\\tnewURI\\t\\tNew URI to be given\\n    function setCollectionURI(\\n        uint collectionId,\\n        string calldata newURI,\\n        bool appendTokenIndex\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        collectionURI[collectionId] = newURI;\\n        appendTokenIndexToCollectionURI[collectionId] = appendTokenIndex;\\n        emit UpdatedProductURI(collectionId, newURI, appendTokenIndex, _metadataExtension);\\n    }\\n\\n\\tfunction tokenToCollection(uint tokenId) internal view returns (uint) {\\n\\t\\treturn rangeToCollection[tokenToRange[tokenId]];\\n\\t}\\n\\n    /// @notice\\tReturns a token's URI\\n    /// @dev\\tWill return unique token URI or product URI or contract URI\\n    /// @param\\ttokenId\\t\\tToken Index to look for\\n    function tokenURI(uint tokenId)\\n        public\\n        view\\n        override(ERC721)\\n        returns (string memory)\\n    {\\n        // Unique token URI\\n        string memory URI = uniqueTokenURI[tokenId];\\n        if (bytes(URI).length > 0) {\\n            return URI;\\n        }\\n\\n        // Range wide URI\\n        URI = rangeURI[tokenToRange[tokenId]];\\n        if (bytes(URI).length > 0) {\\n            if (appendTokenIndexToRangeURI[tokenToRange[tokenId]]) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            URI,\\n                            tokenToCollectionIndex(tokenId).toString(),\\n                            _metadataExtension\\n                        )\\n                    );\\n            }\\n            return URI;\\n        }\\n\\n        // Collection wide URI\\n        URI = collectionURI[tokenToCollection(tokenId)];\\n        if (bytes(URI).length > 0) {\\n            if (appendTokenIndexToCollectionURI[tokenToCollection(tokenId)]) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            URI,\\n                            tokenToCollectionIndex(tokenId).toString(),\\n                            _metadataExtension\\n                        )\\n                    );\\n            }\\n            return URI;\\n        }\\n\\n        URI = baseURI;\\n        if (appendTokenIndexToContractURI) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        URI,\\n                        tokenId.toString(),\\n                        _metadataExtension\\n                    )\\n                );\\n        }\\n        return URI;\\n    }\\n\\n    /// @notice\\tCreates a subdivision of tokens inside the contract (collection is the same as product)\\n    /// @dev\\tThe collections are generated sequentially, there can be no gaps between collections\\n    /// @param\\t_collectionName \\tName of the collection\\n    /// @param\\t_copies\\t\\t\\t\\tAmount of tokens inside the collection\\n    function createProduct(string memory _collectionName, uint _copies)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        uint lastTokenFromPreviousCollection;\\n        if (_collections.length != 0) {\\n            lastTokenFromPreviousCollection =\\n                _collections[_collections.length - 1].endingToken +\\n                1;\\n        }\\n\\n        collection storage newCollection = _collections.push();\\n\\n        newCollection.startingToken = lastTokenFromPreviousCollection;\\n        // -1 because we include the initial token\\n        newCollection.endingToken = newCollection.startingToken + _copies - 1;\\n        newCollection.name = string(_collectionName);\\n\\n        emit CreatedCollection(\\n            _collections.length - 1,\\n            _collectionName,\\n            lastTokenFromPreviousCollection,\\n            _copies\\n        );\\n    }\\n\\n    /// @notice This function will create ranges in batches\\n    /// @dev \\tThere isn't any gas savings here\\n    /// @param\\tcollectionId\\tContains the identification for the product\\n    /// @param\\tdata \\t\\t\\tAn array with the data for all the ranges that we want to implement\\n    function createRangeBatch(uint collectionId, rangeData[] calldata data)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        collectionExists(collectionId)\\n    {\\n        require(data.length > 0, \\\"RAIR ERC721: Empty array\\\");\\n        collection storage selectedCollection = _collections[collectionId];\\n        for (uint i = 0; i < data.length; i++) {\\n            _createRange(\\n                collectionId,\\n                data[i].rangeLength,\\n                data[i].tokensAllowed,\\n                data[i].lockedTokens,\\n                data[i].price,\\n                data[i].name,\\n                selectedCollection\\n            );\\n        }\\n    }\\n\\n    /// @notice Creates a range inside a collection\\n    /// @dev \\tThis function is only available to an account with the `DEFAULT_ADMIN_ROLE` role\\n    /// @dev \\tThis function require thar the collection ID match a valid collection\\n    /// @param\\tcollectionId\\tContains the identification for the product\\n    /// @param\\trangeLength\\t\\tNumber of tokens to be contained in this new range\\n    /// @param \\tprice \\t\\t\\tContains the selling price for the range of NFT\\n    /// @param \\ttokensAllowed \\tContains all the allowed NFT tokens in the range that are available for sell\\n    /// @param \\tlockedTokens \\tContains all the NFT tokens in the range that are unavailable for sell\\n    /// @param \\tname \\t\\t\\tContains the name for the created NFT collection range\\n    function createRange(\\n        uint collectionId,\\n        uint rangeLength,\\n        uint price,\\n        uint tokensAllowed,\\n        uint lockedTokens,\\n        string calldata name\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) collectionExists(collectionId) {\\n        collection storage selectedCollection = _collections[collectionId];\\n        _createRange(\\n            collectionId,\\n            rangeLength,\\n            price,\\n            tokensAllowed,\\n            lockedTokens,\\n            name,\\n            selectedCollection\\n        );\\n    }\\n\\n    /// @notice This is a internal function that will create the NFT range if the requirements are met\\n    /// @param\\tcollectionIndex\\t\\tCollection identifier\\n    /// @param\\t_rangeLength\\t\\tNumber of NFTs in the range\\n    /// @param \\t_allowedTokens \\t\\tContains all the allowed NFT tokens in the range that are available for sell\\n    /// @param \\t_lockedTokens \\t\\tContains all the NFT tokens in the range that are unavailable for sell\\n    /// @param \\t_price \\t\\t\\t\\tContains the selling price for the range of NFT\\n    /// @param \\t_name \\t\\t\\t\\tContains the name for the created NFT collection range\\n    function _createRange(\\n        uint collectionIndex,\\n        uint _rangeLength,\\n        uint _allowedTokens,\\n        uint _lockedTokens,\\n        uint _price,\\n        string calldata _name,\\n        collection storage selectedCollection\\n    ) internal {\\n        uint nextSequentialToken = selectedCollection.startingToken;\\n        if (selectedCollection.rangeList.length > 0) {\\n            nextSequentialToken = (\\n                _ranges[\\n                    selectedCollection.rangeList[\\n                        selectedCollection.rangeList.length - 1\\n                    ]\\n                ]\\n            ).rangeEnd;\\n            nextSequentialToken++;\\n        }\\n\\n        // -1 because it includes the first token inside the range\\n        require(\\n            nextSequentialToken + _rangeLength - 1 <=\\n                selectedCollection.endingToken,\\n            \\\"RAIR ERC721: Invalid range length\\\"\\n        );\\n        require(\\n            _allowedTokens <= _rangeLength,\\n            \\\"RAIR ERC721: Number of allowed tokens must be less or equal than the range's length\\\"\\n        );\\n        require(\\n            _lockedTokens <= _rangeLength,\\n            \\\"RAIR ERC721: Number of locked tokens must be less or equal than the range's length\\\"\\n        );\\n        require(_price == 0 || _price >= 100, \\\"RAIR ERC721: Minimum price for a range is 100\\\");\\n\\n        range storage newRange = _ranges.push();\\n\\n        newRange.rangeStart = nextSequentialToken;\\n        newRange.rangeEnd = nextSequentialToken + _rangeLength - 1;\\n        newRange.mintableTokens = _rangeLength;\\n        newRange.tokensAllowed = _allowedTokens;\\n        newRange.lockedTokens = _lockedTokens;\\n        newRange.rangePrice = _price;\\n        newRange.rangeName = _name;\\n\\n        rangeToCollection[_ranges.length - 1] = collectionIndex;\\n\\n        // No need to initialize minted tokens, the default value is 0\\n\\n        selectedCollection.rangeList.push(_ranges.length - 1);\\n\\n        emit CreatedRange(\\n            collectionIndex,\\n            newRange.rangeStart,\\n            newRange.rangeEnd,\\n            newRange.rangePrice,\\n            newRange.tokensAllowed,\\n            newRange.lockedTokens,\\n            newRange.rangeName,\\n            _ranges.length - 1\\n        );\\n    }\\n\\n    /// @notice\\tUpdates a range\\n    /// @dev \\tBecause they are sequential, the length of the range can't be modified\\n    /// @param\\trangeId \\t\\t\\tIndex of the collection on the contract\\n    /// @param\\tname \\t\\t\\t\\tName of the range\\n    /// @param\\tprice_ \\t\\t\\t\\tPrice for the tokens in the range\\n    /// @param\\ttokensAllowed_ \\t\\tNumber of tokens allowed to be sold\\n    /// @param\\tlockedTokens_ \\t\\tNumber of tokens that have to be minted in order to unlock transfers\\n    function updateRange(\\n        uint rangeId,\\n        string memory name,\\n        uint price_,\\n        uint tokensAllowed_,\\n        uint lockedTokens_\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) rangeExists(rangeId) nonReentrant {\\n        range storage selectedRange = _ranges[rangeId];\\n        require(price_ == 0 || price_ >= 100, \\\"RAIR ERC721: Range price must be greater or equal than 100\\\");\\n        require(\\n            tokensAllowed_ <= selectedRange.mintableTokens,\\n            \\\"RAIR ERC721: Tokens allowed should be less than the number of mintable tokens\\\"\\n        );\\n        require(\\n            lockedTokens_ <= selectedRange.mintableTokens,\\n            \\\"RAIR ERC721: Locked tokens should be less than the number of mintable tokens\\\"\\n        );\\n\\n        selectedRange.tokensAllowed = tokensAllowed_;\\n        if (lockedTokens_ > 0 && selectedRange.lockedTokens == 0) {\\n            emit TradingLocked(\\n                rangeId,\\n                selectedRange.rangeStart,\\n                selectedRange.rangeEnd,\\n                lockedTokens_\\n            );\\n        } else if (lockedTokens_ == 0 && selectedRange.lockedTokens > 0) {\\n            emit TradingUnlocked(\\n                rangeId,\\n                selectedRange.rangeStart,\\n                selectedRange.rangeEnd\\n            );\\n        }\\n        selectedRange.lockedTokens = lockedTokens_;\\n        selectedRange.rangePrice = price_;\\n        selectedRange.rangeName = name;\\n\\n        emit UpdatedRange(rangeId, name, price_, tokensAllowed_, lockedTokens_);\\n    }\\n\\n    /// @notice\\tReturns the number of collections on the contract\\n    /// @dev\\tUse with get collection to list all of the collections\\n    function getCollectionCount()\\n        external\\n        view\\n        override(IRAIR721_Contract)\\n        returns (uint)\\n    {\\n        return _collections.length;\\n    }\\n\\n    /// @notice\\tReturns information about a collection\\n    /// @param\\tcollectionIndex\\tIndex of the collection\\n    function getCollection(uint collectionIndex)\\n        external\\n        view\\n        override(IRAIR721_Contract)\\n        returns (collection memory)\\n    {\\n        return _collections[collectionIndex];\\n    }\\n\\n    /// @notice\\tTranslates the unique index of an NFT to it's collection index\\n    /// @param\\ttoken\\tToken ID to find\\n    function tokenToCollectionIndex(uint token)\\n        public\\n        view\\n        returns (uint tokenIndex)\\n    {\\n        return token - _collections[tokenToCollection(token)].startingToken;\\n    }\\n\\n    /// @notice\\tFinds the first token inside a collection that doesn't have an owner\\n    /// @param\\tcollectionID\\tIndex of the collection to search\\n    /// @param\\tstartingIndex\\tStarting token for the search\\n    /// @param\\tendingIndex\\t\\tEnding token for the search\\n    function getNextSequentialIndex(\\n        uint collectionID,\\n        uint startingIndex,\\n        uint endingIndex\\n    ) public view collectionExists(collectionID) returns (uint nextIndex) {\\n        collection memory currentCollection = _collections[collectionID];\\n        return\\n            _getNextSequentialIndexInRange(\\n                currentCollection.startingToken + startingIndex,\\n                currentCollection.startingToken + endingIndex\\n            );\\n    }\\n\\n    /// @notice\\t\\tLoops through a range of tokens and returns the first token without an owner\\n    /// @dev \\t\\tLoops are expensive in solidity, do not use this in a gas-consuming function\\n    /// @param \\t\\tstartingToken \\tStarting token for the search\\n    /// @param \\t\\tendingToken \\tEnding token for the search\\n    function _getNextSequentialIndexInRange(\\n        uint startingToken,\\n        uint endingToken\\n    ) internal view returns (uint nextIndex) {\\n        for (nextIndex = startingToken; nextIndex <= endingToken; nextIndex++) {\\n            if (!_exists(nextIndex)) {\\n                break;\\n            }\\n        }\\n        require(\\n            startingToken <= nextIndex && nextIndex <= endingToken,\\n            \\\"RAIR ERC721: There are no available tokens in this range.\\\"\\n        );\\n    }\\n\\n    /// @notice This functions allow us to check the information of the range\\n    /// @dev \\tThis function requires that the rangeIndex_ points to an existing range\\n    /// @param\\trangeIndex\\t\\tIdentification of the range to verify\\n    /// @return data \\t\\t\\tInformation about the range\\n    /// @return productIndex \\tContains the index of the product in the range\\n    function rangeInfo(uint rangeIndex)\\n        external\\n        view\\n        override(IRAIR721_Contract)\\n        rangeExists(rangeIndex)\\n        returns (range memory data, uint productIndex)\\n    {\\n        data = _ranges[rangeIndex];\\n        productIndex = rangeToCollection[rangeIndex];\\n    }\\n\\n    /// @notice\\tVerifies if the range where a token is located is locked or not\\n    /// @param\\t_tokenId\\tIndex of the token to search\\n    function isTokenLocked(uint256 _tokenId) public view returns (bool) {\\n        return _ranges[tokenToRange[_tokenId]].lockedTokens > 0;\\n    }\\n\\n\\tfunction mintFromRange(\\n\\t\\taddress buyerAddress,\\n        uint rangeIndex,\\n        uint indexInCollection\\n\\t) \\n        external\\n\\t\\toverride(IRAIR721_Contract)\\n        onlyRole(MINTER)\\n        rangeExists(rangeIndex)\\n\\t{\\n\\t\\t_mintFromRange(\\n\\t\\t\\tbuyerAddress,\\n\\t\\t\\trangeIndex,\\n\\t\\t\\tindexInCollection,\\n\\t\\t\\t1\\n\\t\\t);\\n\\t}\\n\\n    /// @notice\\tLoops over the user's tokens looking for one that belongs to a product and a specific range\\n\\t/// @dev\\tLoops are expensive in solidity, so don't use this in a function that requires gas\\n\\t/// @param\\tuserAddress\\t\\t\\tUser to search\\n\\t/// @param\\tcollectionIndex\\t\\tProduct to search\\n\\t/// @param\\tstartingToken\\t\\tProduct to search\\n\\t/// @param\\tendingToken\\t\\t\\tProduct to search\\n\\tfunction hasTokenInProduct(\\n        address userAddress,\\n        uint collectionIndex,\\n        uint startingToken,\\n        uint endingToken\\n    )\\n        collectionExists(collectionIndex)\\n        public\\n        view\\n        returns (bool)\\n    {\\n\\t\\tcollection memory aux = _collections[collectionIndex];\\n        require(\\n            aux.endingToken - aux.startingToken + 1 > startingToken &&\\n            aux.endingToken - aux.startingToken + 1 > endingToken, \\n            \\\"RAIR ERC721: Invalid parameters\\\"\\n        );\\n\\t\\tif (aux.endingToken != 0) {\\n            uint end = aux.startingToken + endingToken;\\n\\t\\t\\tfor (uint i = aux.startingToken + startingToken; i < end; i++) {\\n\\t\\t\\t\\tif (_exists(i) && ownerOf(i) == userAddress) {\\n                    return true;\\n                }\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n    /// @notice\\tMints a specific token within a range\\n    /// @dev\\tHas to be used alongside getNextSequentialIndex to simulate a sequential minting\\n    /// @dev\\tAnyone that wants a specific token just has to call this function with the index they want\\n    /// @param\\tbuyerAddress\\t\\tAddress of the new token's owner\\n    /// @param\\trangeIndex\\t\\t\\tIndex of the range\\n    /// @param\\tindexInCollection\\tIndex of the token inside the collection\\n    function _mintFromRange(\\n        address buyerAddress,\\n        uint rangeIndex,\\n        uint indexInCollection,\\n\\t\\tuint tokenQuantity\\n    )\\n        internal\\n    {\\n        range storage selectedRange = _ranges[rangeIndex];\\n        collection storage selectedCollection = _collections[\\n            rangeToCollection[rangeIndex]\\n        ];\\n\\n        require(\\n            selectedRange.tokensAllowed >= tokenQuantity,\\n            \\\"RAIR ERC721: Not allowed to mint that many tokens\\\"\\n        );\\n        require(\\n            selectedRange.rangeStart <=\\n                selectedCollection.startingToken + indexInCollection &&\\n                selectedCollection.startingToken + indexInCollection + tokenQuantity - 1 <=\\n                selectedRange.rangeEnd,\\n            \\\"RAIR ERC721: Tried to mint token outside of range\\\"\\n        );\\n\\n        selectedRange.tokensAllowed -= tokenQuantity;\\n\\n        if (selectedRange.lockedTokens > 0) {\\n\\t\\t\\tif (selectedRange.lockedTokens <= tokenQuantity) {\\n\\t            selectedRange.lockedTokens = 0;\\n\\t\\t\\t} else {\\n\\t            selectedRange.lockedTokens -= tokenQuantity;\\n\\t\\t\\t}\\n            if (selectedRange.lockedTokens == 0) {\\n                emit TradingUnlocked(\\n                    rangeIndex,\\n                    selectedRange.rangeStart,\\n                    selectedRange.rangeEnd\\n                );\\n            }\\n        }\\n\\n\\t\\tfor (; tokenQuantity > 0; tokenQuantity--) {\\n\\t\\t\\t_safeMint(\\n\\t\\t\\t\\tbuyerAddress,\\n\\t\\t\\t\\tselectedCollection.startingToken + indexInCollection + tokenQuantity - 1\\n\\t\\t\\t);\\n\\t\\t\\ttokenToRange[\\n\\t\\t\\t\\tselectedCollection.startingToken + indexInCollection + tokenQuantity - 1\\n\\t\\t\\t] = rangeIndex;\\n\\t\\t}\\n    }\\n\\n    /// @notice Returns the fee for the NFT sale\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice sale price\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\\n        external\\n        view\\n        override(IRAIR721_Contract, IERC2981)\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        require(\\n            _exists(_tokenId),\\n            \\\"RAIR ERC721: Royalty query for a non-existing token\\\"\\n        );\\n        return (owner, (_salePrice * _royaltyFee) / 100000);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC165, AccessControl, ERC721, IERC2981)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Hook being called before every transfer\\n    /// @dev\\tLocks and the requirement of the TRADER role happe here\\n    /// @param\\t_from\\t\\tToken's original owner\\n    /// @param\\t_to\\t\\t\\tToken's new owner\\n    /// @param\\t_tokenId\\tToken's ID\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual override(ERC721) nonReentrant{\\n        // If the transfer isn't to mint (from = address(0)) and it's not a burn (to = address(0))\\n        if (_from != address(0) && _to != address(0)) {\\n            //\\n            if (\\n                _ranges.length > 0 &&\\n                rangeToCollection[tokenToRange[_tokenId]] ==\\n                tokenToCollection(_tokenId)\\n            ) {\\n                require(\\n                    _ranges[tokenToRange[_tokenId]].lockedTokens == 0,\\n                    \\\"RAIR ERC721: Transfers for this range are currently locked\\\"\\n                );\\n            }\\n            if (_requireTrader) {\\n                _checkRole(TRADER, msg.sender);\\n            }\\n        }\\n        super._beforeTokenTransfer(_from, _to, _tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x2c1c840f0bb09c6f826439667957edd9741ab772d9c6b6806b4d5be05f686269\",\"license\":\"GPL-3.0\"},\"openzeppelin-v4.7.1/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"openzeppelin-v4.7.1/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005c0a38038062005c0a833981016040819052620000349162000273565b6200004f60008051602062005bca83398151915280620000c3565b6200007960008051602062005bea83398151915260008051602062005bca833981519152620000c3565b620000866000336200010e565b620000a160008051602062005bca833981519152336200010e565b620000bc60008051602062005bea833981519152826200010e565b50620002a5565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6200011a82826200011e565b5050565b6200013582826200016160201b620004231760201c565b60008281526001602090815260409091206200015c918390620004ab62000201821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200011a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000218836001600160a01b03841662000221565b90505b92915050565b60008181526001830160205260408120546200026a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200021b565b5060006200021b565b6000602082840312156200028657600080fd5b81516001600160a01b03811681146200029e57600080fd5b9392505050565b61591580620002b56000396000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c806364f8f754116200007a57806364f8f75414620001a95780639010d07c14620001d957806391d1485414620001f0578063a217fddf1462000207578063ca15c8731462000210578063d547741f146200022757600080fd5b806301ffc9a714620000c8578063248a9ca314620000f45780632aabb72614620001295780632dd3100014620001515780632f2ff15d146200017957806336568abe1462000192575b600080fd5b620000df620000d9366004620009a6565b6200023e565b60405190151581526020015b60405180910390f35b6200011a62000105366004620009d2565b60009081526020819052604090206001015490565b604051908152602001620000eb565b6200011a7fd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb81565b6200011a7f547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a7381565b620001906200018a36600462000a09565b6200026c565b005b62000190620001a336600462000a09565b6200029a565b620001c0620001ba36600462000a38565b62000320565b6040516001600160a01b039091168152602001620000eb565b620001c0620001ea36600462000ac2565b62000397565b620000df6200020136600462000a09565b620003b8565b6200011a600081565b6200011a62000221366004620009d2565b620003e1565b620001906200023836600462000a09565b620003fa565b60006001600160e01b03198216635a05180f60e01b14806200026657506200026682620004c2565b92915050565b6000828152602081905260409020600101546200028981620004f9565b62000295838362000508565b505050565b6001600160a01b0381163314620003105760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6200031c82826200052e565b5050565b60007f547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a736200034e81620004f9565b6000848487604051620003619062000998565b6200036f9392919062000ae5565b604051809103906000f0801580156200038c573d6000803e3d6000fd5b509695505050505050565b6000828152600160205260408120620003b1908362000554565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600160205260408120620002669062000562565b6000828152602081905260409020600101546200041781620004f9565b6200029583836200052e565b6200042f8282620003b8565b6200031c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004673390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620003b1836001600160a01b0384166200056d565b60006001600160e01b03198216637965db0b60e01b14806200026657506301ffc9a760e01b6001600160e01b031983161462000266565b620005058133620005bf565b50565b62000514828262000423565b6000828152600160205260409020620002959082620004ab565b6200053a82826200062e565b600082815260016020526040902062000295908262000696565b6000620003b18383620006ad565b600062000266825490565b6000818152600183016020526040812054620005b65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000266565b50600062000266565b620005cb8282620003b8565b6200031c57620005e6816001600160a01b03166014620006da565b620005f3836020620006da565b6040516020016200060692919062000b4c565b60408051601f198184030181529082905262461bcd60e51b8252620003079160040162000bc5565b6200063a8282620003b8565b156200031c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000620003b1836001600160a01b03841662000894565b6000826000018281548110620006c757620006c762000bfa565b9060005260206000200154905092915050565b60606000620006eb83600262000c26565b620006f890600262000c40565b67ffffffffffffffff81111562000713576200071362000c56565b6040519080825280601f01601f1916602001820160405280156200073e576020820181803683370190505b509050600360fc1b816000815181106200075c576200075c62000bfa565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200078e576200078e62000bfa565b60200101906001600160f81b031916908160001a9053506000620007b484600262000c26565b620007c190600162000c40565b90505b600181111562000843576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620007f957620007f962000bfa565b1a60f81b82828151811062000812576200081262000bfa565b60200101906001600160f81b031916908160001a90535060049490941c936200083b8162000c6c565b9050620007c4565b508315620003b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000307565b600081815260018301602052604081205480156200098d576000620008bb60018362000c86565b8554909150600090620008d19060019062000c86565b90508181146200093d576000866000018281548110620008f557620008f562000bfa565b90600052602060002001549050808760000184815481106200091b576200091b62000bfa565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000951576200095162000c9c565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000266565b600091505062000266565b614c2d8062000cb383390190565b600060208284031215620009b957600080fd5b81356001600160e01b031981168114620003b157600080fd5b600060208284031215620009e557600080fd5b5035919050565b80356001600160a01b038116811462000a0457600080fd5b919050565b6000806040838503121562000a1d57600080fd5b8235915062000a2f60208401620009ec565b90509250929050565b60008060006040848603121562000a4e57600080fd5b62000a5984620009ec565b9250602084013567ffffffffffffffff8082111562000a7757600080fd5b818601915086601f83011262000a8c57600080fd5b81358181111562000a9c57600080fd5b87602082850101111562000aaf57600080fd5b6020830194508093505050509250925092565b6000806040838503121562000ad657600080fd5b50508035926020909101359150565b6040815282604082015282846060830137600060608483018101919091526001600160a01b03929092166020820152601f909201601f191690910101919050565b60005b8381101562000b4357818101518382015260200162000b29565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000b8681601785016020880162000b26565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000bb981602884016020880162000b26565b01602801949350505050565b602081526000825180602084015262000be681604085016020870162000b26565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762000266576200026662000c10565b8082018082111562000266576200026662000c10565b634e487b7160e01b600052604160045260246000fd5b60008162000c7e5762000c7e62000c10565b506000190190565b8181038181111562000266576200026662000c10565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b5060405162004c2d38038062004c2d833981016040819052620000349162000240565b6040805180820190915260048152632920a4a960e11b6020820152829060006200005f8382620003b7565b5060016200006e8282620003b7565b5050600160075550601580546001600160a01b031916331790556040805180820190915260048152632920a4a960e11b6020820152601690620000b29082620003b7565b506017805461ffff1916617530179055620000cf60008262000159565b620000fb7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc98262000159565b620001277f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce8262000159565b6011805461ff0019169055601480546001600160a01b0319166001600160a01b03929092169190911790555062000483565b62000165828262000169565b5050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001655760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b82516001600160401b03808211156200026c57600080fd5b818501915085601f8301126200028157600080fd5b8151818111156200029657620002966200020d565b604051601f8201601f19908116603f01168101908382118183101715620002c157620002c16200020d565b81604052828152602093508884848701011115620002de57600080fd5b600091505b82821015620003025784820184015181830185015290830190620002e3565b60008484830101528096505050506200031d81860162000223565b925050509250929050565b600181811c908216806200033d57607f821691505b6020821081036200035e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003b257600081815260208120601f850160051c810160208610156200038d5750805b601f850160051c820191505b81811015620003ae5782815560010162000399565b5050505b505050565b81516001600160401b03811115620003d357620003d36200020d565b620003eb81620003e4845462000328565b8462000364565b602080601f8311600181146200042357600084156200040a5750858301515b600019600386901b1c1916600185901b178555620003ae565b600085815260208120601f198616915b82811015620004545788860151825594840194600190910190840162000433565b5085821015620004735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61479a80620004936000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c806391d148541161019d578063c1d78b4a116100e9578063d6215ace116100a2578063e9300c6c1161007c578063e9300c6c146106fe578063e985e9c514610711578063f2fde38b1461074d578063fe6d81241461076057600080fd5b8063d6215ace146106d0578063e7662243146106e3578063e8a3d485146106f657600080fd5b8063c1d78b4a14610643578063c45a015514610656578063c87b56dd14610669578063c99931be1461067c578063d31aa70f1461069d578063d547741f146106bd57600080fd5b8063a22cb46511610156578063b64b21ca11610130578063b64b21ca146105f7578063b88d4fde1461060a578063ba51b1b41461061d578063bda5ec331461063057600080fd5b8063a22cb465146105be578063ab9aae35146105d1578063ac323a1f146105e457600080fd5b806391d1485414610562578063938e3d7b14610575578063956711ac1461058857806395d89b411461059b5780639f6350e6146105a3578063a217fddf146105b657600080fd5b80632a55205a1161025c5780635a1f3c28116102155780636c99dcbf116101ef5780636c99dcbf1461051657806370a082311461052957806381f460ef1461053c5780638da5cb5b1461054f57600080fd5b80635a1f3c28146104d05780636352211e146104f0578063673636b71461050357600080fd5b80632a55205a1461043f5780632e900374146104715780632f2ff15d1461048457806335755a731461049757806336568abe146104aa57806342842e0e146104bd57600080fd5b8063192e322c116102ae578063192e322c146103c85780631c10106f146103db5780631c899d1a146103e357806323b872dd146103f6578063248a9ca314610409578063276a28a31461042c57600080fd5b806301ffc9a7146102f657806306fdde031461031e578063081812fc14610333578063095ea7b31461035e5780630de2689e14610373578063175c4ef8146103a1575b600080fd5b61030961030436600461373e565b610787565b60405190151581526020015b60405180910390f35b6103266107b2565b60405161031591906137ab565b6103466103413660046137be565b610844565b6040516001600160a01b039091168152602001610315565b61037161036c3660046137f3565b61086b565b005b6103936103813660046137be565b60086020526000908152604090205481565b604051908152602001610315565b6103937f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6103716103d636600461385e565b610985565b601354610393565b6103716103f13660046138d1565b6109f4565b61037161040436600461391c565b610a5a565b6103936104173660046137be565b60009081526006602052604090206001015490565b61030961043a3660046137be565b610a8b565b61045261044d366004613958565b610ac9565b604080516001600160a01b039093168352602083019190915201610315565b61037161047f3660046137be565b610b86565b61037161049236600461397a565b610bd5565b6103716104a53660046139ea565b610bfa565b6103716104b836600461397a565b610d99565b6103716104cb36600461391c565b610e17565b6104e36104de3660046137be565b610e32565b6040516103159190613a28565b6103466104fe3660046137be565b610f8e565b610371610511366004613b4f565b610fee565b610309610524366004613bb0565b611373565b610393610537366004613be9565b611608565b61037161054a366004613c14565b61168e565b601454610346906001600160a01b031681565b61030961057036600461397a565b611715565b610371610583366004613c71565b611740565b610371610596366004613cb2565b611797565b6103266117bd565b6103716105b1366004613c71565b6117cc565b610393600081565b6103716105cc366004613ccd565b6118a3565b6103936105df3660046137be565b6118ae565b6103716105f2366004613cf7565b6118fa565b610371610605366004613d1b565b61191e565b610371610618366004613d6e565b61197c565b61037161062b366004613c71565b6119b4565b61039361063e366004613de9565b6119cc565b610371610651366004613e15565b611b50565b601554610346906001600160a01b031681565b6103266106773660046137be565b611c35565b61068f61068a3660046137be565b611f8f565b604051610315929190613e80565b6103936106ab3660046137be565b60096020526000908152604090205481565b6103716106cb36600461397a565b612109565b6103716106de366004613c14565b61212e565b6103716106f1366004613eea565b6121a6565b610326612207565b61037161070c366004613f1d565b612216565b61030961071f366004613f61565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61037161075b366004613be9565b612320565b6103937ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b03198216632baae9fd60e01b14806107ac57506107ac8261235c565b92915050565b6060600080546107c190613f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107ed90613f8b565b801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b5050505050905090565b600061084f82612381565b506000908152600460205260409020546001600160a01b031690565b600061087682610f8e565b9050806001600160a01b0316836001600160a01b0316036108e85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806109045750610904813361071f565b6109765760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016108df565b61098083836123e3565b505050565b600061099081612451565b601354889081106109b35760405162461bcd60e51b81526004016108df90613fc5565b600060138a815481106109c8576109c861400b565b906000526020600020906004020190506109e88a8a8a8a8a8a8a8861245b565b50505050505050505050565b60006109ff81612451565b6000848152600a60205260409020610a18838583614067565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f9848484604051610a4c9392919061414f565b60405180910390a150505050565b610a64338261282b565b610a805760405162461bcd60e51b81526004016108df90614172565b6109808383836128aa565b600081815260086020526040812054601280548392908110610aaf57610aaf61400b565b906000526020600020906007020160040154119050919050565b60008281526002602052604081205481906001600160a01b0316610b4b5760405162461bcd60e51b815260206004820152603360248201527f52414952204552433732313a20526f79616c747920717565727920666f722061604482015272103737b716b2bc34b9ba34b733903a37b5b2b760691b60648201526084016108df565b6014546017546001600160a01b0390911690620186a090610b709061ffff16866141d6565b610b7a9190614203565b915091505b9250929050565b6000610b9181612451565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207610bbc84611c35565b604051610bc991906137ab565b60405180910390a25050565b600082815260066020526040902060010154610bf081612451565b6109808383612a51565b6000610c0581612451565b60135484908110610c285760405162461bcd60e51b81526004016108df90613fc5565b82610c755760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d707479206172726179000000000000000060448201526064016108df565b600060138681548110610c8a57610c8a61400b565b9060005260206000209060040201905060005b84811015610d9057610d7e87878784818110610cbb57610cbb61400b565b9050602002810190610ccd9190614217565b35888885818110610ce057610ce061400b565b9050602002810190610cf29190614217565b60400135898986818110610d0857610d0861400b565b9050602002810190610d1a9190614217565b606001358a8a87818110610d3057610d3061400b565b9050602002810190610d429190614217565b602001358b8b88818110610d5857610d5861400b565b9050602002810190610d6a9190614217565b610d78906080810190614237565b8961245b565b80610d888161427d565b915050610c9d565b50505050505050565b6001600160a01b0381163314610e095760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108df565b610e138282612ad7565b5050565b6109808383836040518060200160405280600081525061197c565b610e5d6040518060800160405280600081526020016000815260200160608152602001606081525090565b60138281548110610e7057610e7061400b565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054610ead90613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed990613f8b565b8015610f265780601f10610efb57610100808354040283529160200191610f26565b820191906000526020600020905b815481529060010190602001808311610f0957829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f7e57602002820191906000526020600020905b815481526020019060010190808311610f6a575b5050505050815250509050919050565b6000818152600260205260408120546001600160a01b0316806107ac5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108df565b6000610ff981612451565b6012548690811061101c5760405162461bcd60e51b81526004016108df90614296565b60026007540361106e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108df565b600260078190555060006012888154811061108b5761108b61400b565b9060005260206000209060070201905085600014806110ab575060648610155b61111d5760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a2052616e6765207072696365206d75737420626560448201527f2067726561746572206f7220657175616c207468616e2031303000000000000060648201526084016108df565b80600301548511156111ad5760405162461bcd60e51b815260206004820152604d60248201527f52414952204552433732313a20546f6b656e7320616c6c6f7765642073686f7560448201527f6c64206265206c657373207468616e20746865206e756d626572206f66206d6960648201526c6e7461626c6520746f6b656e7360981b608482015260a4016108df565b806003015484111561123c5760405162461bcd60e51b815260206004820152604c60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e20746865206e756d626572206f66206d696e60648201526b7461626c6520746f6b656e7360a01b608482015260a4016108df565b60028101859055831580159061125457506004810154155b156112a85780546001820154604080519283526020830191909152810185905288907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2611308565b831580156112ba575060008160040154115b1561130857805460018201546040518a927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e926112ff92918252602082015260400190565b60405180910390a25b60048101849055600581018690556006810161132488826142d7565b507f675fe88181b85cb3612f534abc69fa999ba2e4744dc830488c9de8b25ec6cfd1888888888860405161135c959493929190614396565b60405180910390a150506001600755505050505050565b600083806013805490501161139a5760405162461bcd60e51b81526004016108df90613fc5565b6000601386815481106113af576113af61400b565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820180546113ec90613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461141890613f8b565b80156114655780601f1061143a57610100808354040283529160200191611465565b820191906000526020600020905b81548152906001019060200180831161144857829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156114bd57602002820191906000526020600020905b8154815260200190600101908083116114a9575b505050505081525050905084816000015182602001516114dd91906143cc565b6114e89060016143df565b11801561150f5750805160208201518591611502916143cc565b61150d9060016143df565b115b61155b5760405162461bcd60e51b815260206004820152601f60248201527f52414952204552433732313a20496e76616c696420706172616d65746572730060448201526064016108df565b6020810151156115f95780516000906115759086906143df565b9050600086836000015161158991906143df565b90505b818110156115f6576000818152600260205260409020546001600160a01b0316151580156115d35750886001600160a01b03166115c882610f8e565b6001600160a01b0316145b156115e457600194505050506115ff565b806115ee8161427d565b91505061158c565b50505b60009250505b50949350505050565b60006001600160a01b0382166116725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016108df565b506001600160a01b031660009081526003602052604090205490565b600061169981612451565b6000858152600c602052604090206116b2848683614067565b506000858152600e602052604090819020805460ff1916841515179055517f2bb1ada610787986fd4521b4954a78d4f238f7bca767c926c6f07d999a9cda439061170690879087908790879060189061446f565b60405180910390a15050505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061174b81612451565b6010611758838583614067565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c1838360405161178a9291906144af565b60405180910390a1505050565b60006117a281612451565b50601180549115156101000261ff0019909216919091179055565b6060601680546107c190613f8b565b60006117d781612451565b828260008181106117ea576117ea61400b565b9050013560f81c60f81b6001600160f81b031916601760f91b146118655760405162461bcd60e51b815260206004820152602c60248201527f52414952204552433732313a20457874656e73696f6e206d757374207374617260448201526b742077697468206120272e2760a01b60648201526084016108df565b6018611872838583614067565b507faa320816703c301a5fd8413568c3c1973befd093aa334d16a2414f0019b0f3da601860405161178a91906144c3565b610e13338383612b3e565b60008181526008602090815260408083205483526009909152812054601390815481106118dd576118dd61400b565b906000526020600020906004020160000154826107ac91906143cc565b600061190581612451565b506017805461ffff191661ffff92909216919091179055565b600061192981612451565b600f611936848683614067565b506011805460ff19168315151790556040517f5a46dbcba74fa6a037f659c582371f45be00bed8b34d9edc9ee5ef9eb2571d9d90610a4c908690869086906018906144d6565b611986338361282b565b6119a25760405162461bcd60e51b81526004016108df90614172565b6119ae84848484612c0c565b50505050565b60006119bf81612451565b60166119ae838583614067565b60008380601380549050116119f35760405162461bcd60e51b81526004016108df90613fc5565b600060138681548110611a0857611a0861400b565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054611a4590613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7190613f8b565b8015611abe5780601f10611a9357610100808354040283529160200191611abe565b820191906000526020600020905b815481529060010190602001808311611aa157829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611b1657602002820191906000526020600020905b815481526020019060010190808311611b02575b5050505050815250509050611b46858260000151611b3491906143df565b8251611b419087906143df565b612c3f565b9695505050505050565b6000611b5b81612451565b838214611bd05760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e677468000000000060648201526084016108df565b60005b84811015611c2d57611c1b868683818110611bf057611bf061400b565b90506020020135858584818110611c0957611c0961400b565b90506020028101906103f19190614237565b80611c258161427d565b915050611bd3565b505050505050565b6000818152600a6020526040812080546060929190611c5390613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7f90613f8b565b8015611ccc5780601f10611ca157610100808354040283529160200191611ccc565b820191906000526020600020905b815481529060010190602001808311611caf57829003601f168201915b50505050509050600081511115611ce35792915050565b6000838152600860209081526040808320548352600c90915290208054611d0990613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3590613f8b565b8015611d825780601f10611d5757610100808354040283529160200191611d82565b820191906000526020600020905b815481529060010190602001808311611d6557829003601f168201915b50505050509050600081511115611df4576000838152600860209081526040808320548352600e90915290205460ff16156107ac5780611dc9611dc4856118ae565b612cf9565b6018604051602001611ddd9392919061450f565b604051602081830303815290604052915050919050565b600083815260086020908152604080832054835260098252808320548352600b90915290208054611e2490613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5090613f8b565b8015611e9d5780601f10611e7257610100808354040283529160200191611e9d565b820191906000526020600020905b815481529060010190602001808311611e8057829003601f168201915b50505050509050600081511115611ee957600083815260086020908152604080832054835260098252808320548352600d90915290205460ff16156107ac5780611dc9611dc4856118ae565b600f8054611ef690613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2290613f8b565b8015611f6f5780601f10611f4457610100808354040283529160200191611f6f565b820191906000526020600020905b815481529060010190602001808311611f5257829003601f168201915b5050601154939450505060ff9091161590506107ac5780611dc984612cf9565b611fcf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828060128054905011611ff65760405162461bcd60e51b81526004016108df90614296565b601284815481106120095761200961400b565b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201805461206e90613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461209a90613f8b565b80156120e75780601f106120bc576101008083540402835291602001916120e7565b820191906000526020600020905b8154815290600101906020018083116120ca57829003601f168201915b5050509190925250505060009485526009602052604090942054939492505050565b60008281526006602052604090206001015461212481612451565b6109808383612ad7565b600061213981612451565b6000858152600b60205260409020612152848683614067565b506000858152600d602052604090819020805460ff1916841515179055517ff143691bfd54372ac96096580c7ac8fa560f8c1b3c770db4f16eb1197c8d2f439061170690879087908790879060189061446f565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc96121d081612451565b601254839081106121f35760405162461bcd60e51b81526004016108df90614296565b6122008585856001612df9565b5050505050565b6060601080546107c190613f8b565b600061222181612451565b6013546000901561226d576013805461223c906001906143cc565b8154811061224c5761224c61400b565b906000526020600020906004020160010154600161226a91906143df565b90505b60138054600181810183556000929092526004027f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001828155906122b185846143df565b6122bb91906143cc565b6001820155600281016122ce86826142d7565b506013546122de906001906143cc565b7fe318895d3fd44cb3524ca783576b7737ae76b172e344357462ab4258b50c1c22868487604051612311939291906145af565b60405180910390a25050505050565b600061232b81612451565b612336600083612a51565b601480546001600160a01b0319166001600160a01b038416179055610e13600033610d99565b60006001600160e01b03198216637965db0b60e01b14806107ac57506107ac8261309f565b6000818152600260205260409020546001600160a01b03166123e05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108df565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061241882610f8e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6123e081336130ef565b80546003820154156124cb576003820180546012919061247d906001906143cc565b8154811061248d5761248d61400b565b9060005260206000200154815481106124a8576124a861400b565b906000526020600020906007020160010154905080806124c79061427d565b9150505b600180830154906124dc8a846143df565b6124e691906143cc565b111561253e5760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c69642072616e6765206c656e67746044820152600d60fb1b60648201526084016108df565b878711156125d05760405162461bcd60e51b815260206004820152605360248201527f52414952204552433732313a204e756d626572206f6620616c6c6f776564207460448201527f6f6b656e73206d757374206265206c657373206f7220657175616c207468616e606482015272040e8d0ca40e4c2dcceca4ee640d8cadccee8d606b1b608482015260a4016108df565b878611156126615760405162461bcd60e51b815260206004820152605260248201527f52414952204552433732313a204e756d626572206f66206c6f636b656420746f60448201527f6b656e73206d757374206265206c657373206f7220657175616c207468616e206064820152710e8d0ca40e4c2dcceca4ee640d8cadccee8d60731b608482015260a4016108df565b84158061266f575060648510155b6126d15760405162461bcd60e51b815260206004820152602d60248201527f52414952204552433732313a204d696e696d756d20707269636520666f72206160448201526c02072616e67652069732031303609c1b60648201526084016108df565b60128054600181810183556000929092526007027fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401828155906127158a846143df565b61271f91906143cc565b6001820155600381018990556002810188905560048101879055600581018690556006810161274f858783614067565b508960096000600160128054905061276791906143cc565b8152602081019190915260400160002055601254600384019061278c906001906143cc565b90806001815401808255809150506001900390600052602060002001600090919091909150557fc4e232d19c750404428930450f0a050bf4c166f32910679d1b9e52f17bad83478a8260000154836001015484600501548560020154866004015487600601600160128054905061280391906143cc565b6040516128179897969594939291906145d4565b60405180910390a150505050505050505050565b60008061283783610f8e565b9050806001600160a01b0316846001600160a01b0316148061287e57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806128a25750836001600160a01b031661289784610844565b6001600160a01b0316145b949350505050565b826001600160a01b03166128bd82610f8e565b6001600160a01b0316146129215760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108df565b6001600160a01b0382166129835760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108df565b61298e838383613153565b6129996000826123e3565b6001600160a01b03831660009081526003602052604081208054600192906129c29084906143cc565b90915550506001600160a01b03821660009081526003602052604081208054600192906129f09084906143df565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612a5b8282611715565b610e135760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612a933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612ae18282611715565b15610e135760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031603612b9f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108df565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612c178484846128aa565b612c23848484846132ea565b6119ae5760405162461bcd60e51b81526004016108df90614622565b815b818111612c77576000818152600260205260409020546001600160a01b031615612c775780612c6f8161427d565b915050612c41565b808311158015612c875750818111155b6107ac5760405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e0000000000000060648201526084016108df565b606081600003612d205750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612d4a5780612d348161427d565b9150612d439050600a83614203565b9150612d24565b6000816001600160401b03811115612d6457612d64613aa4565b6040519080825280601f01601f191660200182016040528015612d8e576020820181803683370190505b5090505b84156128a257612da36001836143cc565b9150612db0600a86614674565b612dbb9060306143df565b60f81b818381518110612dd057612dd061400b565b60200101906001600160f81b031916908160001a905350612df2600a86614203565b9450612d92565b600060128481548110612e0e57612e0e61400b565b9060005260206000209060070201905060006013600960008781526020019081526020016000205481548110612e4657612e4661400b565b906000526020600020906004020190508282600201541015612ec45760405162461bcd60e51b815260206004820152603160248201527f52414952204552433732313a204e6f7420616c6c6f77656420746f206d696e746044820152702074686174206d616e7920746f6b656e7360781b60648201526084016108df565b8054612ed19085906143df565b825411801590612f0b57508160010154600184868460000154612ef491906143df565b612efe91906143df565b612f0891906143cc565b11155b612f715760405162461bcd60e51b815260206004820152603160248201527f52414952204552433732313a20547269656420746f206d696e7420746f6b656e604482015270206f757473696465206f662072616e676560781b60648201526084016108df565b82826002016000828254612f8591906143cc565b909155505060048201541561301a5782826004015411612fab5760006004830155612fc5565b82826004016000828254612fbf91906143cc565b90915550505b816004015460000361301a578154600183015460405187927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e9261301192918252602082015260400190565b60405180910390a25b8215611c2d576130508660018587856000015461303791906143df565b61304191906143df565b61304b91906143cc565b6133eb565b846008600060018688866000015461306891906143df565b61307291906143df565b61307c91906143cc565b81526020810191909152604001600020558261309781614688565b93505061301a565b60006001600160e01b031982166380ac58cd60e01b14806130d057506001600160e01b03198216635b5e139f60e01b145b806107ac57506301ffc9a760e01b6001600160e01b03198316146107ac565b6130f98282611715565b610e1357613111816001600160a01b03166014613405565b61311c836020613405565b60405160200161312d92919061469f565b60408051601f198184030181529082905262461bcd60e51b82526108df916004016137ab565b6002600754036131a55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108df565b60026007556001600160a01b038316158015906131ca57506001600160a01b03821615155b156132e057601254158015906131f6575060008181526008602090815260408220549091526009905260015b156132a65760008181526008602052604090205460128054909190811061321f5761321f61400b565b9060005260206000209060070201600401546000146132a65760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a205472616e736665727320666f7220746869732060448201527f72616e6765206172652063757272656e746c79206c6f636b656400000000000060648201526084016108df565b601154610100900460ff16156132e0576132e07f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce336130ef565b5050600160075550565b60006001600160a01b0384163b156133e057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061332e903390899088908890600401614714565b6020604051808303816000875af1925050508015613369575060408051601f3d908101601f1916820190925261336691810190614747565b60015b6133c6573d808015613397576040519150601f19603f3d011682016040523d82523d6000602084013e61339c565b606091505b5080516000036133be5760405162461bcd60e51b81526004016108df90614622565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506128a2565b506001949350505050565b610e138282604051806020016040528060008152506135a7565b606060006134148360026141d6565b61341f9060026143df565b6001600160401b0381111561343657613436613aa4565b6040519080825280601f01601f191660200182016040528015613460576020820181803683370190505b509050600360fc1b8160008151811061347b5761347b61400b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106134aa576134aa61400b565b60200101906001600160f81b031916908160001a90535060006134ce8460026141d6565b6134d99060016143df565b90505b6001811115613551576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061350d5761350d61400b565b1a60f81b8282815181106135235761352361400b565b60200101906001600160f81b031916908160001a90535060049490941c9361354a81614688565b90506134dc565b5083156135a05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108df565b9392505050565b6135b183836135da565b6135be60008484846132ea565b6109805760405162461bcd60e51b81526004016108df90614622565b6001600160a01b0382166136305760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108df565b6000818152600260205260409020546001600160a01b0316156136955760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108df565b6136a160008383613153565b6001600160a01b03821660009081526003602052604081208054600192906136ca9084906143df565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146123e057600080fd5b60006020828403121561375057600080fd5b81356135a081613728565b60005b8381101561377657818101518382015260200161375e565b50506000910152565b6000815180845261379781602086016020860161375b565b601f01601f19169290920160200192915050565b6020815260006135a0602083018461377f565b6000602082840312156137d057600080fd5b5035919050565b80356001600160a01b03811681146137ee57600080fd5b919050565b6000806040838503121561380657600080fd5b61380f836137d7565b946020939093013593505050565b60008083601f84011261382f57600080fd5b5081356001600160401b0381111561384657600080fd5b602083019150836020828501011115610b7f57600080fd5b600080600080600080600060c0888a03121561387957600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160401b038111156138b257600080fd5b6138be8a828b0161381d565b989b979a50959850939692959293505050565b6000806000604084860312156138e657600080fd5b8335925060208401356001600160401b0381111561390357600080fd5b61390f8682870161381d565b9497909650939450505050565b60008060006060848603121561393157600080fd5b61393a846137d7565b9250613948602085016137d7565b9150604084013590509250925092565b6000806040838503121561396b57600080fd5b50508035926020909101359150565b6000806040838503121561398d57600080fd5b8235915061399d602084016137d7565b90509250929050565b60008083601f8401126139b857600080fd5b5081356001600160401b038111156139cf57600080fd5b6020830191508360208260051b8501011115610b7f57600080fd5b6000806000604084860312156139ff57600080fd5b8335925060208401356001600160401b03811115613a1c57600080fd5b61390f868287016139a6565b60006020808352835181840152808401516040840152604084015160806060850152613a5760a085018261377f565b6060860151858203601f19016080870152805180835290840192506000918401905b80831015613a995783518252928401926001929092019190840190613a79565b509695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613ad457613ad4613aa4565b604051601f8501601f19908116603f01168101908282118183101715613afc57613afc613aa4565b81604052809350858152868686011115613b1557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613b4057600080fd5b6135a083833560208501613aba565b600080600080600060a08688031215613b6757600080fd5b8535945060208601356001600160401b03811115613b8457600080fd5b613b9088828901613b2f565b959895975050505060408401359360608101359360809091013592509050565b60008060008060808587031215613bc657600080fd5b613bcf856137d7565b966020860135965060408601359560600135945092505050565b600060208284031215613bfb57600080fd5b6135a0826137d7565b803580151581146137ee57600080fd5b60008060008060608587031215613c2a57600080fd5b8435935060208501356001600160401b03811115613c4757600080fd5b613c538782880161381d565b9094509250613c66905060408601613c04565b905092959194509250565b60008060208385031215613c8457600080fd5b82356001600160401b03811115613c9a57600080fd5b613ca68582860161381d565b90969095509350505050565b600060208284031215613cc457600080fd5b6135a082613c04565b60008060408385031215613ce057600080fd5b613ce9836137d7565b915061399d60208401613c04565b600060208284031215613d0957600080fd5b813561ffff811681146135a057600080fd5b600080600060408486031215613d3057600080fd5b83356001600160401b03811115613d4657600080fd5b613d528682870161381d565b9094509250613d65905060208501613c04565b90509250925092565b60008060008060808587031215613d8457600080fd5b613d8d856137d7565b9350613d9b602086016137d7565b92506040850135915060608501356001600160401b03811115613dbd57600080fd5b8501601f81018713613dce57600080fd5b613ddd87823560208401613aba565b91505092959194509250565b600080600060608486031215613dfe57600080fd5b505081359360208301359350604090920135919050565b60008060008060408587031215613e2b57600080fd5b84356001600160401b0380821115613e4257600080fd5b613e4e888389016139a6565b90965094506020870135915080821115613e6757600080fd5b50613e74878288016139a6565b95989497509550505050565b60408152825160408201526020830151606082015260408301516080820152606083015160a0820152608083015160c082015260a083015160e0820152600060c084015160e0610100840152613eda61012084018261377f565b9150508260208301529392505050565b600080600060608486031215613eff57600080fd5b613f08846137d7565b95602085013595506040909401359392505050565b60008060408385031215613f3057600080fd5b82356001600160401b03811115613f4657600080fd5b613f5285828601613b2f565b95602094909401359450505050565b60008060408385031215613f7457600080fd5b613f7d836137d7565b915061399d602084016137d7565b600181811c90821680613f9f57607f821691505b602082108103613fbf57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b601f82111561098057600081815260208120601f850160051c810160208610156140485750805b601f850160051c820191505b81811015611c2d57828155600101614054565b6001600160401b0383111561407e5761407e613aa4565b6140928361408c8354613f8b565b83614021565b6000601f8411600181146140c657600085156140ae5750838201355b600019600387901b1c1916600186901b178355612200565b600083815260209020601f19861690835b828110156140f757868501358255602094850194600190920191016140d7565b50868210156141145760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000614169604083018486614126565b95945050505050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107ac576107ac6141c0565b634e487b7160e01b600052601260045260246000fd5b600082614212576142126141ed565b500490565b60008235609e1983360301811261422d57600080fd5b9190910192915050565b6000808335601e1984360301811261424e57600080fd5b8301803591506001600160401b0382111561426857600080fd5b602001915036819003821315610b7f57600080fd5b60006001820161428f5761428f6141c0565b5060010190565b60208082526021908201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b81516001600160401b038111156142f0576142f0613aa4565b614304816142fe8454613f8b565b84614021565b602080601f83116001811461433957600084156143215750858301515b600019600386901b1c1916600185901b178555611c2d565b600085815260208120601f198616915b8281101561436857888601518255948401946001909101908401614349565b50858210156143865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a0602082015260006143af60a083018761377f565b604083019590955250606081019290925260809091015292915050565b818103818111156107ac576107ac6141c0565b808201808211156107ac576107ac6141c0565b600081546143ff81613f8b565b80855260206001838116801561441c576001811461443657614464565b60ff1985168884015283151560051b880183019550614464565b866000528260002060005b8581101561445c5781548a8201860152908301908401614441565b890184019650505b505050505092915050565b858152608060208201526000614489608083018688614126565b841515604084015282810360608401526144a381856143f2565b98975050505050505050565b6020815260006128a2602083018486614126565b6020815260006135a060208301846143f2565b6060815260006144ea606083018688614126565b8415156020840152828103604084015261450481856143f2565b979650505050505050565b6000845160206145228285838a0161375b565b8551918401916145358184848a0161375b565b855492019160009061454681613f8b565b6001828116801561455e57600181146145735761459f565b60ff198416875282151583028701945061459f565b896000528560002060005b848110156145975781548982015290830190870161457e565b505082870194505b50929a9950505050505050505050565b6060815260006145c2606083018661377f565b60208301949094525060400152919050565b60006101008a83528960208401528860408401528760608401528660808401528560a08401528060c084015261460c818401866143f2565b9150508260e08301529998505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082614683576146836141ed565b500690565b600081614697576146976141c0565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146d781601785016020880161375b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161470881602884016020880161375b565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b469083018461377f565b60006020828403121561475957600080fd5b81516135a08161372856fea2646970667358221220233a5906567ce64c1d91905e31bc5c1b2127e3da28e111ca9cac366662c31b1c64736f6c63430008110033a2646970667358221220be8e323dcc2c4a26a714a82d320221d2aa71c7d5ce67f9908e574e34d4153eeb64736f6c63430008110033d88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a73",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c35760003560e01c806364f8f754116200007a57806364f8f75414620001a95780639010d07c14620001d957806391d1485414620001f0578063a217fddf1462000207578063ca15c8731462000210578063d547741f146200022757600080fd5b806301ffc9a714620000c8578063248a9ca314620000f45780632aabb72614620001295780632dd3100014620001515780632f2ff15d146200017957806336568abe1462000192575b600080fd5b620000df620000d9366004620009a6565b6200023e565b60405190151581526020015b60405180910390f35b6200011a62000105366004620009d2565b60009081526020819052604090206001015490565b604051908152602001620000eb565b6200011a7fd88b35d7427a01a8e16d8a129535b4cf3150edf8d92c0a44dc1eba73bdaf18cb81565b6200011a7f547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a7381565b620001906200018a36600462000a09565b6200026c565b005b62000190620001a336600462000a09565b6200029a565b620001c0620001ba36600462000a38565b62000320565b6040516001600160a01b039091168152602001620000eb565b620001c0620001ea36600462000ac2565b62000397565b620000df6200020136600462000a09565b620003b8565b6200011a600081565b6200011a62000221366004620009d2565b620003e1565b620001906200023836600462000a09565b620003fa565b60006001600160e01b03198216635a05180f60e01b14806200026657506200026682620004c2565b92915050565b6000828152602081905260409020600101546200028981620004f9565b62000295838362000508565b505050565b6001600160a01b0381163314620003105760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6200031c82826200052e565b5050565b60007f547b500e425d72fd0723933cceefc203cef652b4736fd04250c3369b3e1a0a736200034e81620004f9565b6000848487604051620003619062000998565b6200036f9392919062000ae5565b604051809103906000f0801580156200038c573d6000803e3d6000fd5b509695505050505050565b6000828152600160205260408120620003b1908362000554565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600160205260408120620002669062000562565b6000828152602081905260409020600101546200041781620004f9565b6200029583836200052e565b6200042f8282620003b8565b6200031c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620004673390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620003b1836001600160a01b0384166200056d565b60006001600160e01b03198216637965db0b60e01b14806200026657506301ffc9a760e01b6001600160e01b031983161462000266565b620005058133620005bf565b50565b62000514828262000423565b6000828152600160205260409020620002959082620004ab565b6200053a82826200062e565b600082815260016020526040902062000295908262000696565b6000620003b18383620006ad565b600062000266825490565b6000818152600183016020526040812054620005b65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000266565b50600062000266565b620005cb8282620003b8565b6200031c57620005e6816001600160a01b03166014620006da565b620005f3836020620006da565b6040516020016200060692919062000b4c565b60408051601f198184030181529082905262461bcd60e51b8252620003079160040162000bc5565b6200063a8282620003b8565b156200031c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000620003b1836001600160a01b03841662000894565b6000826000018281548110620006c757620006c762000bfa565b9060005260206000200154905092915050565b60606000620006eb83600262000c26565b620006f890600262000c40565b67ffffffffffffffff81111562000713576200071362000c56565b6040519080825280601f01601f1916602001820160405280156200073e576020820181803683370190505b509050600360fc1b816000815181106200075c576200075c62000bfa565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200078e576200078e62000bfa565b60200101906001600160f81b031916908160001a9053506000620007b484600262000c26565b620007c190600162000c40565b90505b600181111562000843576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620007f957620007f962000bfa565b1a60f81b82828151811062000812576200081262000bfa565b60200101906001600160f81b031916908160001a90535060049490941c936200083b8162000c6c565b9050620007c4565b508315620003b15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000307565b600081815260018301602052604081205480156200098d576000620008bb60018362000c86565b8554909150600090620008d19060019062000c86565b90508181146200093d576000866000018281548110620008f557620008f562000bfa565b90600052602060002001549050808760000184815481106200091b576200091b62000bfa565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000951576200095162000c9c565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000266565b600091505062000266565b614c2d8062000cb383390190565b600060208284031215620009b957600080fd5b81356001600160e01b031981168114620003b157600080fd5b600060208284031215620009e557600080fd5b5035919050565b80356001600160a01b038116811462000a0457600080fd5b919050565b6000806040838503121562000a1d57600080fd5b8235915062000a2f60208401620009ec565b90509250929050565b60008060006040848603121562000a4e57600080fd5b62000a5984620009ec565b9250602084013567ffffffffffffffff8082111562000a7757600080fd5b818601915086601f83011262000a8c57600080fd5b81358181111562000a9c57600080fd5b87602082850101111562000aaf57600080fd5b6020830194508093505050509250925092565b6000806040838503121562000ad657600080fd5b50508035926020909101359150565b6040815282604082015282846060830137600060608483018101919091526001600160a01b03929092166020820152601f909201601f191690910101919050565b60005b8381101562000b4357818101518382015260200162000b29565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000b8681601785016020880162000b26565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000bb981602884016020880162000b26565b01602801949350505050565b602081526000825180602084015262000be681604085016020870162000b26565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762000266576200026662000c10565b8082018082111562000266576200026662000c10565b634e487b7160e01b600052604160045260246000fd5b60008162000c7e5762000c7e62000c10565b506000190190565b8181038181111562000266576200026662000c10565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b5060405162004c2d38038062004c2d833981016040819052620000349162000240565b6040805180820190915260048152632920a4a960e11b6020820152829060006200005f8382620003b7565b5060016200006e8282620003b7565b5050600160075550601580546001600160a01b031916331790556040805180820190915260048152632920a4a960e11b6020820152601690620000b29082620003b7565b506017805461ffff1916617530179055620000cf60008262000159565b620000fb7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc98262000159565b620001277f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce8262000159565b6011805461ff0019169055601480546001600160a01b0319166001600160a01b03929092169190911790555062000483565b62000165828262000169565b5050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16620001655760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b82516001600160401b03808211156200026c57600080fd5b818501915085601f8301126200028157600080fd5b8151818111156200029657620002966200020d565b604051601f8201601f19908116603f01168101908382118183101715620002c157620002c16200020d565b81604052828152602093508884848701011115620002de57600080fd5b600091505b82821015620003025784820184015181830185015290830190620002e3565b60008484830101528096505050506200031d81860162000223565b925050509250929050565b600181811c908216806200033d57607f821691505b6020821081036200035e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003b257600081815260208120601f850160051c810160208610156200038d5750805b601f850160051c820191505b81811015620003ae5782815560010162000399565b5050505b505050565b81516001600160401b03811115620003d357620003d36200020d565b620003eb81620003e4845462000328565b8462000364565b602080601f8311600181146200042357600084156200040a5750858301515b600019600386901b1c1916600185901b178555620003ae565b600085815260208120601f198616915b82811015620004545788860151825594840194600190910190840162000433565b5085821015620004735787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61479a80620004936000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c806391d148541161019d578063c1d78b4a116100e9578063d6215ace116100a2578063e9300c6c1161007c578063e9300c6c146106fe578063e985e9c514610711578063f2fde38b1461074d578063fe6d81241461076057600080fd5b8063d6215ace146106d0578063e7662243146106e3578063e8a3d485146106f657600080fd5b8063c1d78b4a14610643578063c45a015514610656578063c87b56dd14610669578063c99931be1461067c578063d31aa70f1461069d578063d547741f146106bd57600080fd5b8063a22cb46511610156578063b64b21ca11610130578063b64b21ca146105f7578063b88d4fde1461060a578063ba51b1b41461061d578063bda5ec331461063057600080fd5b8063a22cb465146105be578063ab9aae35146105d1578063ac323a1f146105e457600080fd5b806391d1485414610562578063938e3d7b14610575578063956711ac1461058857806395d89b411461059b5780639f6350e6146105a3578063a217fddf146105b657600080fd5b80632a55205a1161025c5780635a1f3c28116102155780636c99dcbf116101ef5780636c99dcbf1461051657806370a082311461052957806381f460ef1461053c5780638da5cb5b1461054f57600080fd5b80635a1f3c28146104d05780636352211e146104f0578063673636b71461050357600080fd5b80632a55205a1461043f5780632e900374146104715780632f2ff15d1461048457806335755a731461049757806336568abe146104aa57806342842e0e146104bd57600080fd5b8063192e322c116102ae578063192e322c146103c85780631c10106f146103db5780631c899d1a146103e357806323b872dd146103f6578063248a9ca314610409578063276a28a31461042c57600080fd5b806301ffc9a7146102f657806306fdde031461031e578063081812fc14610333578063095ea7b31461035e5780630de2689e14610373578063175c4ef8146103a1575b600080fd5b61030961030436600461373e565b610787565b60405190151581526020015b60405180910390f35b6103266107b2565b60405161031591906137ab565b6103466103413660046137be565b610844565b6040516001600160a01b039091168152602001610315565b61037161036c3660046137f3565b61086b565b005b6103936103813660046137be565b60086020526000908152604090205481565b604051908152602001610315565b6103937f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6103716103d636600461385e565b610985565b601354610393565b6103716103f13660046138d1565b6109f4565b61037161040436600461391c565b610a5a565b6103936104173660046137be565b60009081526006602052604090206001015490565b61030961043a3660046137be565b610a8b565b61045261044d366004613958565b610ac9565b604080516001600160a01b039093168352602083019190915201610315565b61037161047f3660046137be565b610b86565b61037161049236600461397a565b610bd5565b6103716104a53660046139ea565b610bfa565b6103716104b836600461397a565b610d99565b6103716104cb36600461391c565b610e17565b6104e36104de3660046137be565b610e32565b6040516103159190613a28565b6103466104fe3660046137be565b610f8e565b610371610511366004613b4f565b610fee565b610309610524366004613bb0565b611373565b610393610537366004613be9565b611608565b61037161054a366004613c14565b61168e565b601454610346906001600160a01b031681565b61030961057036600461397a565b611715565b610371610583366004613c71565b611740565b610371610596366004613cb2565b611797565b6103266117bd565b6103716105b1366004613c71565b6117cc565b610393600081565b6103716105cc366004613ccd565b6118a3565b6103936105df3660046137be565b6118ae565b6103716105f2366004613cf7565b6118fa565b610371610605366004613d1b565b61191e565b610371610618366004613d6e565b61197c565b61037161062b366004613c71565b6119b4565b61039361063e366004613de9565b6119cc565b610371610651366004613e15565b611b50565b601554610346906001600160a01b031681565b6103266106773660046137be565b611c35565b61068f61068a3660046137be565b611f8f565b604051610315929190613e80565b6103936106ab3660046137be565b60096020526000908152604090205481565b6103716106cb36600461397a565b612109565b6103716106de366004613c14565b61212e565b6103716106f1366004613eea565b6121a6565b610326612207565b61037161070c366004613f1d565b612216565b61030961071f366004613f61565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61037161075b366004613be9565b612320565b6103937ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b03198216632baae9fd60e01b14806107ac57506107ac8261235c565b92915050565b6060600080546107c190613f8b565b80601f01602080910402602001604051908101604052809291908181526020018280546107ed90613f8b565b801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b5050505050905090565b600061084f82612381565b506000908152600460205260409020546001600160a01b031690565b600061087682610f8e565b9050806001600160a01b0316836001600160a01b0316036108e85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806109045750610904813361071f565b6109765760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016108df565b61098083836123e3565b505050565b600061099081612451565b601354889081106109b35760405162461bcd60e51b81526004016108df90613fc5565b600060138a815481106109c8576109c861400b565b906000526020600020906004020190506109e88a8a8a8a8a8a8a8861245b565b50505050505050505050565b60006109ff81612451565b6000848152600a60205260409020610a18838583614067565b507faab063d4691f636507767c2040fbab0b0e00a684d66a2f9640653ed5e7b859f9848484604051610a4c9392919061414f565b60405180910390a150505050565b610a64338261282b565b610a805760405162461bcd60e51b81526004016108df90614172565b6109808383836128aa565b600081815260086020526040812054601280548392908110610aaf57610aaf61400b565b906000526020600020906007020160040154119050919050565b60008281526002602052604081205481906001600160a01b0316610b4b5760405162461bcd60e51b815260206004820152603360248201527f52414952204552433732313a20526f79616c747920717565727920666f722061604482015272103737b716b2bc34b9ba34b733903a37b5b2b760691b60648201526084016108df565b6014546017546001600160a01b0390911690620186a090610b709061ffff16866141d6565b610b7a9190614203565b915091505b9250929050565b6000610b9181612451565b817fa109ba539900bf1b633f956d63c96fc89b814c7287f7aa50a9216d0b55657207610bbc84611c35565b604051610bc991906137ab565b60405180910390a25050565b600082815260066020526040902060010154610bf081612451565b6109808383612a51565b6000610c0581612451565b60135484908110610c285760405162461bcd60e51b81526004016108df90613fc5565b82610c755760405162461bcd60e51b815260206004820152601860248201527f52414952204552433732313a20456d707479206172726179000000000000000060448201526064016108df565b600060138681548110610c8a57610c8a61400b565b9060005260206000209060040201905060005b84811015610d9057610d7e87878784818110610cbb57610cbb61400b565b9050602002810190610ccd9190614217565b35888885818110610ce057610ce061400b565b9050602002810190610cf29190614217565b60400135898986818110610d0857610d0861400b565b9050602002810190610d1a9190614217565b606001358a8a87818110610d3057610d3061400b565b9050602002810190610d429190614217565b602001358b8b88818110610d5857610d5861400b565b9050602002810190610d6a9190614217565b610d78906080810190614237565b8961245b565b80610d888161427d565b915050610c9d565b50505050505050565b6001600160a01b0381163314610e095760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016108df565b610e138282612ad7565b5050565b6109808383836040518060200160405280600081525061197c565b610e5d6040518060800160405280600081526020016000815260200160608152602001606081525090565b60138281548110610e7057610e7061400b565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054610ead90613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed990613f8b565b8015610f265780601f10610efb57610100808354040283529160200191610f26565b820191906000526020600020905b815481529060010190602001808311610f0957829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015610f7e57602002820191906000526020600020905b815481526020019060010190808311610f6a575b5050505050815250509050919050565b6000818152600260205260408120546001600160a01b0316806107ac5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108df565b6000610ff981612451565b6012548690811061101c5760405162461bcd60e51b81526004016108df90614296565b60026007540361106e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108df565b600260078190555060006012888154811061108b5761108b61400b565b9060005260206000209060070201905085600014806110ab575060648610155b61111d5760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a2052616e6765207072696365206d75737420626560448201527f2067726561746572206f7220657175616c207468616e2031303000000000000060648201526084016108df565b80600301548511156111ad5760405162461bcd60e51b815260206004820152604d60248201527f52414952204552433732313a20546f6b656e7320616c6c6f7765642073686f7560448201527f6c64206265206c657373207468616e20746865206e756d626572206f66206d6960648201526c6e7461626c6520746f6b656e7360981b608482015260a4016108df565b806003015484111561123c5760405162461bcd60e51b815260206004820152604c60248201527f52414952204552433732313a204c6f636b656420746f6b656e732073686f756c60448201527f64206265206c657373207468616e20746865206e756d626572206f66206d696e60648201526b7461626c6520746f6b656e7360a01b608482015260a4016108df565b60028101859055831580159061125457506004810154155b156112a85780546001820154604080519283526020830191909152810185905288907fd2deaeacc8e325d59c09833f4f8df9c144784d547a7725c7085fae3b644c93e49060600160405180910390a2611308565b831580156112ba575060008160040154115b1561130857805460018201546040518a927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e926112ff92918252602082015260400190565b60405180910390a25b60048101849055600581018690556006810161132488826142d7565b507f675fe88181b85cb3612f534abc69fa999ba2e4744dc830488c9de8b25ec6cfd1888888888860405161135c959493929190614396565b60405180910390a150506001600755505050505050565b600083806013805490501161139a5760405162461bcd60e51b81526004016108df90613fc5565b6000601386815481106113af576113af61400b565b906000526020600020906004020160405180608001604052908160008201548152602001600182015481526020016002820180546113ec90613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461141890613f8b565b80156114655780601f1061143a57610100808354040283529160200191611465565b820191906000526020600020905b81548152906001019060200180831161144857829003601f168201915b50505050508152602001600382018054806020026020016040519081016040528092919081815260200182805480156114bd57602002820191906000526020600020905b8154815260200190600101908083116114a9575b505050505081525050905084816000015182602001516114dd91906143cc565b6114e89060016143df565b11801561150f5750805160208201518591611502916143cc565b61150d9060016143df565b115b61155b5760405162461bcd60e51b815260206004820152601f60248201527f52414952204552433732313a20496e76616c696420706172616d65746572730060448201526064016108df565b6020810151156115f95780516000906115759086906143df565b9050600086836000015161158991906143df565b90505b818110156115f6576000818152600260205260409020546001600160a01b0316151580156115d35750886001600160a01b03166115c882610f8e565b6001600160a01b0316145b156115e457600194505050506115ff565b806115ee8161427d565b91505061158c565b50505b60009250505b50949350505050565b60006001600160a01b0382166116725760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016108df565b506001600160a01b031660009081526003602052604090205490565b600061169981612451565b6000858152600c602052604090206116b2848683614067565b506000858152600e602052604090819020805460ff1916841515179055517f2bb1ada610787986fd4521b4954a78d4f238f7bca767c926c6f07d999a9cda439061170690879087908790879060189061446f565b60405180910390a15050505050565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600061174b81612451565b6010611758838583614067565b507f64729fba330f29cb50d748098a4dff25d203b0c55833653113fb5e80bcbd16c1838360405161178a9291906144af565b60405180910390a1505050565b60006117a281612451565b50601180549115156101000261ff0019909216919091179055565b6060601680546107c190613f8b565b60006117d781612451565b828260008181106117ea576117ea61400b565b9050013560f81c60f81b6001600160f81b031916601760f91b146118655760405162461bcd60e51b815260206004820152602c60248201527f52414952204552433732313a20457874656e73696f6e206d757374207374617260448201526b742077697468206120272e2760a01b60648201526084016108df565b6018611872838583614067565b507faa320816703c301a5fd8413568c3c1973befd093aa334d16a2414f0019b0f3da601860405161178a91906144c3565b610e13338383612b3e565b60008181526008602090815260408083205483526009909152812054601390815481106118dd576118dd61400b565b906000526020600020906004020160000154826107ac91906143cc565b600061190581612451565b506017805461ffff191661ffff92909216919091179055565b600061192981612451565b600f611936848683614067565b506011805460ff19168315151790556040517f5a46dbcba74fa6a037f659c582371f45be00bed8b34d9edc9ee5ef9eb2571d9d90610a4c908690869086906018906144d6565b611986338361282b565b6119a25760405162461bcd60e51b81526004016108df90614172565b6119ae84848484612c0c565b50505050565b60006119bf81612451565b60166119ae838583614067565b60008380601380549050116119f35760405162461bcd60e51b81526004016108df90613fc5565b600060138681548110611a0857611a0861400b565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282018054611a4590613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7190613f8b565b8015611abe5780601f10611a9357610100808354040283529160200191611abe565b820191906000526020600020905b815481529060010190602001808311611aa157829003601f168201915b5050505050815260200160038201805480602002602001604051908101604052809291908181526020018280548015611b1657602002820191906000526020600020905b815481526020019060010190808311611b02575b5050505050815250509050611b46858260000151611b3491906143df565b8251611b419087906143df565b612c3f565b9695505050505050565b6000611b5b81612451565b838214611bd05760405162461bcd60e51b815260206004820152603b60248201527f52414952204552433732313a20546f6b656e2049447320616e6420555249732060448201527f73686f756c642068617665207468652073616d65206c656e677468000000000060648201526084016108df565b60005b84811015611c2d57611c1b868683818110611bf057611bf061400b565b90506020020135858584818110611c0957611c0961400b565b90506020028101906103f19190614237565b80611c258161427d565b915050611bd3565b505050505050565b6000818152600a6020526040812080546060929190611c5390613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611c7f90613f8b565b8015611ccc5780601f10611ca157610100808354040283529160200191611ccc565b820191906000526020600020905b815481529060010190602001808311611caf57829003601f168201915b50505050509050600081511115611ce35792915050565b6000838152600860209081526040808320548352600c90915290208054611d0990613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d3590613f8b565b8015611d825780601f10611d5757610100808354040283529160200191611d82565b820191906000526020600020905b815481529060010190602001808311611d6557829003601f168201915b50505050509050600081511115611df4576000838152600860209081526040808320548352600e90915290205460ff16156107ac5780611dc9611dc4856118ae565b612cf9565b6018604051602001611ddd9392919061450f565b604051602081830303815290604052915050919050565b600083815260086020908152604080832054835260098252808320548352600b90915290208054611e2490613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5090613f8b565b8015611e9d5780601f10611e7257610100808354040283529160200191611e9d565b820191906000526020600020905b815481529060010190602001808311611e8057829003601f168201915b50505050509050600081511115611ee957600083815260086020908152604080832054835260098252808320548352600d90915290205460ff16156107ac5780611dc9611dc4856118ae565b600f8054611ef690613f8b565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2290613f8b565b8015611f6f5780601f10611f4457610100808354040283529160200191611f6f565b820191906000526020600020905b815481529060010190602001808311611f5257829003601f168201915b5050601154939450505060ff9091161590506107ac5780611dc984612cf9565b611fcf6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081525090565b6000828060128054905011611ff65760405162461bcd60e51b81526004016108df90614296565b601284815481106120095761200961400b565b90600052602060002090600702016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201805461206e90613f8b565b80601f016020809104026020016040519081016040528092919081815260200182805461209a90613f8b565b80156120e75780601f106120bc576101008083540402835291602001916120e7565b820191906000526020600020905b8154815290600101906020018083116120ca57829003601f168201915b5050509190925250505060009485526009602052604090942054939492505050565b60008281526006602052604090206001015461212481612451565b6109808383612ad7565b600061213981612451565b6000858152600b60205260409020612152848683614067565b506000858152600d602052604090819020805460ff1916841515179055517ff143691bfd54372ac96096580c7ac8fa560f8c1b3c770db4f16eb1197c8d2f439061170690879087908790879060189061446f565b7ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc96121d081612451565b601254839081106121f35760405162461bcd60e51b81526004016108df90614296565b6122008585856001612df9565b5050505050565b6060601080546107c190613f8b565b600061222181612451565b6013546000901561226d576013805461223c906001906143cc565b8154811061224c5761224c61400b565b906000526020600020906004020160010154600161226a91906143df565b90505b60138054600181810183556000929092526004027f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09001828155906122b185846143df565b6122bb91906143cc565b6001820155600281016122ce86826142d7565b506013546122de906001906143cc565b7fe318895d3fd44cb3524ca783576b7737ae76b172e344357462ab4258b50c1c22868487604051612311939291906145af565b60405180910390a25050505050565b600061232b81612451565b612336600083612a51565b601480546001600160a01b0319166001600160a01b038416179055610e13600033610d99565b60006001600160e01b03198216637965db0b60e01b14806107ac57506107ac8261309f565b6000818152600260205260409020546001600160a01b03166123e05760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016108df565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061241882610f8e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6123e081336130ef565b80546003820154156124cb576003820180546012919061247d906001906143cc565b8154811061248d5761248d61400b565b9060005260206000200154815481106124a8576124a861400b565b906000526020600020906007020160010154905080806124c79061427d565b9150505b600180830154906124dc8a846143df565b6124e691906143cc565b111561253e5760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a20496e76616c69642072616e6765206c656e67746044820152600d60fb1b60648201526084016108df565b878711156125d05760405162461bcd60e51b815260206004820152605360248201527f52414952204552433732313a204e756d626572206f6620616c6c6f776564207460448201527f6f6b656e73206d757374206265206c657373206f7220657175616c207468616e606482015272040e8d0ca40e4c2dcceca4ee640d8cadccee8d606b1b608482015260a4016108df565b878611156126615760405162461bcd60e51b815260206004820152605260248201527f52414952204552433732313a204e756d626572206f66206c6f636b656420746f60448201527f6b656e73206d757374206265206c657373206f7220657175616c207468616e206064820152710e8d0ca40e4c2dcceca4ee640d8cadccee8d60731b608482015260a4016108df565b84158061266f575060648510155b6126d15760405162461bcd60e51b815260206004820152602d60248201527f52414952204552433732313a204d696e696d756d20707269636520666f72206160448201526c02072616e67652069732031303609c1b60648201526084016108df565b60128054600181810183556000929092526007027fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401828155906127158a846143df565b61271f91906143cc565b6001820155600381018990556002810188905560048101879055600581018690556006810161274f858783614067565b508960096000600160128054905061276791906143cc565b8152602081019190915260400160002055601254600384019061278c906001906143cc565b90806001815401808255809150506001900390600052602060002001600090919091909150557fc4e232d19c750404428930450f0a050bf4c166f32910679d1b9e52f17bad83478a8260000154836001015484600501548560020154866004015487600601600160128054905061280391906143cc565b6040516128179897969594939291906145d4565b60405180910390a150505050505050505050565b60008061283783610f8e565b9050806001600160a01b0316846001600160a01b0316148061287e57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806128a25750836001600160a01b031661289784610844565b6001600160a01b0316145b949350505050565b826001600160a01b03166128bd82610f8e565b6001600160a01b0316146129215760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016108df565b6001600160a01b0382166129835760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016108df565b61298e838383613153565b6129996000826123e3565b6001600160a01b03831660009081526003602052604081208054600192906129c29084906143cc565b90915550506001600160a01b03821660009081526003602052604081208054600192906129f09084906143df565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b612a5b8282611715565b610e135760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612a933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612ae18282611715565b15610e135760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b816001600160a01b0316836001600160a01b031603612b9f5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016108df565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612c178484846128aa565b612c23848484846132ea565b6119ae5760405162461bcd60e51b81526004016108df90614622565b815b818111612c77576000818152600260205260409020546001600160a01b031615612c775780612c6f8161427d565b915050612c41565b808311158015612c875750818111155b6107ac5760405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e0000000000000060648201526084016108df565b606081600003612d205750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612d4a5780612d348161427d565b9150612d439050600a83614203565b9150612d24565b6000816001600160401b03811115612d6457612d64613aa4565b6040519080825280601f01601f191660200182016040528015612d8e576020820181803683370190505b5090505b84156128a257612da36001836143cc565b9150612db0600a86614674565b612dbb9060306143df565b60f81b818381518110612dd057612dd061400b565b60200101906001600160f81b031916908160001a905350612df2600a86614203565b9450612d92565b600060128481548110612e0e57612e0e61400b565b9060005260206000209060070201905060006013600960008781526020019081526020016000205481548110612e4657612e4661400b565b906000526020600020906004020190508282600201541015612ec45760405162461bcd60e51b815260206004820152603160248201527f52414952204552433732313a204e6f7420616c6c6f77656420746f206d696e746044820152702074686174206d616e7920746f6b656e7360781b60648201526084016108df565b8054612ed19085906143df565b825411801590612f0b57508160010154600184868460000154612ef491906143df565b612efe91906143df565b612f0891906143cc565b11155b612f715760405162461bcd60e51b815260206004820152603160248201527f52414952204552433732313a20547269656420746f206d696e7420746f6b656e604482015270206f757473696465206f662072616e676560781b60648201526084016108df565b82826002016000828254612f8591906143cc565b909155505060048201541561301a5782826004015411612fab5760006004830155612fc5565b82826004016000828254612fbf91906143cc565b90915550505b816004015460000361301a578154600183015460405187927f83d23f069f5730ce94e107a9258bae3b7a0f97184978fd7daa41c8df8ac6c29e9261301192918252602082015260400190565b60405180910390a25b8215611c2d576130508660018587856000015461303791906143df565b61304191906143df565b61304b91906143cc565b6133eb565b846008600060018688866000015461306891906143df565b61307291906143df565b61307c91906143cc565b81526020810191909152604001600020558261309781614688565b93505061301a565b60006001600160e01b031982166380ac58cd60e01b14806130d057506001600160e01b03198216635b5e139f60e01b145b806107ac57506301ffc9a760e01b6001600160e01b03198316146107ac565b6130f98282611715565b610e1357613111816001600160a01b03166014613405565b61311c836020613405565b60405160200161312d92919061469f565b60408051601f198184030181529082905262461bcd60e51b82526108df916004016137ab565b6002600754036131a55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108df565b60026007556001600160a01b038316158015906131ca57506001600160a01b03821615155b156132e057601254158015906131f6575060008181526008602090815260408220549091526009905260015b156132a65760008181526008602052604090205460128054909190811061321f5761321f61400b565b9060005260206000209060070201600401546000146132a65760405162461bcd60e51b815260206004820152603a60248201527f52414952204552433732313a205472616e736665727320666f7220746869732060448201527f72616e6765206172652063757272656e746c79206c6f636b656400000000000060648201526084016108df565b601154610100900460ff16156132e0576132e07f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce336130ef565b5050600160075550565b60006001600160a01b0384163b156133e057604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061332e903390899088908890600401614714565b6020604051808303816000875af1925050508015613369575060408051601f3d908101601f1916820190925261336691810190614747565b60015b6133c6573d808015613397576040519150601f19603f3d011682016040523d82523d6000602084013e61339c565b606091505b5080516000036133be5760405162461bcd60e51b81526004016108df90614622565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506128a2565b506001949350505050565b610e138282604051806020016040528060008152506135a7565b606060006134148360026141d6565b61341f9060026143df565b6001600160401b0381111561343657613436613aa4565b6040519080825280601f01601f191660200182016040528015613460576020820181803683370190505b509050600360fc1b8160008151811061347b5761347b61400b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106134aa576134aa61400b565b60200101906001600160f81b031916908160001a90535060006134ce8460026141d6565b6134d99060016143df565b90505b6001811115613551576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061350d5761350d61400b565b1a60f81b8282815181106135235761352361400b565b60200101906001600160f81b031916908160001a90535060049490941c9361354a81614688565b90506134dc565b5083156135a05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108df565b9392505050565b6135b183836135da565b6135be60008484846132ea565b6109805760405162461bcd60e51b81526004016108df90614622565b6001600160a01b0382166136305760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016108df565b6000818152600260205260409020546001600160a01b0316156136955760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016108df565b6136a160008383613153565b6001600160a01b03821660009081526003602052604081208054600192906136ca9084906143df565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146123e057600080fd5b60006020828403121561375057600080fd5b81356135a081613728565b60005b8381101561377657818101518382015260200161375e565b50506000910152565b6000815180845261379781602086016020860161375b565b601f01601f19169290920160200192915050565b6020815260006135a0602083018461377f565b6000602082840312156137d057600080fd5b5035919050565b80356001600160a01b03811681146137ee57600080fd5b919050565b6000806040838503121561380657600080fd5b61380f836137d7565b946020939093013593505050565b60008083601f84011261382f57600080fd5b5081356001600160401b0381111561384657600080fd5b602083019150836020828501011115610b7f57600080fd5b600080600080600080600060c0888a03121561387957600080fd5b873596506020880135955060408801359450606088013593506080880135925060a08801356001600160401b038111156138b257600080fd5b6138be8a828b0161381d565b989b979a50959850939692959293505050565b6000806000604084860312156138e657600080fd5b8335925060208401356001600160401b0381111561390357600080fd5b61390f8682870161381d565b9497909650939450505050565b60008060006060848603121561393157600080fd5b61393a846137d7565b9250613948602085016137d7565b9150604084013590509250925092565b6000806040838503121561396b57600080fd5b50508035926020909101359150565b6000806040838503121561398d57600080fd5b8235915061399d602084016137d7565b90509250929050565b60008083601f8401126139b857600080fd5b5081356001600160401b038111156139cf57600080fd5b6020830191508360208260051b8501011115610b7f57600080fd5b6000806000604084860312156139ff57600080fd5b8335925060208401356001600160401b03811115613a1c57600080fd5b61390f868287016139a6565b60006020808352835181840152808401516040840152604084015160806060850152613a5760a085018261377f565b6060860151858203601f19016080870152805180835290840192506000918401905b80831015613a995783518252928401926001929092019190840190613a79565b509695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b0380841115613ad457613ad4613aa4565b604051601f8501601f19908116603f01168101908282118183101715613afc57613afc613aa4565b81604052809350858152868686011115613b1557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112613b4057600080fd5b6135a083833560208501613aba565b600080600080600060a08688031215613b6757600080fd5b8535945060208601356001600160401b03811115613b8457600080fd5b613b9088828901613b2f565b959895975050505060408401359360608101359360809091013592509050565b60008060008060808587031215613bc657600080fd5b613bcf856137d7565b966020860135965060408601359560600135945092505050565b600060208284031215613bfb57600080fd5b6135a0826137d7565b803580151581146137ee57600080fd5b60008060008060608587031215613c2a57600080fd5b8435935060208501356001600160401b03811115613c4757600080fd5b613c538782880161381d565b9094509250613c66905060408601613c04565b905092959194509250565b60008060208385031215613c8457600080fd5b82356001600160401b03811115613c9a57600080fd5b613ca68582860161381d565b90969095509350505050565b600060208284031215613cc457600080fd5b6135a082613c04565b60008060408385031215613ce057600080fd5b613ce9836137d7565b915061399d60208401613c04565b600060208284031215613d0957600080fd5b813561ffff811681146135a057600080fd5b600080600060408486031215613d3057600080fd5b83356001600160401b03811115613d4657600080fd5b613d528682870161381d565b9094509250613d65905060208501613c04565b90509250925092565b60008060008060808587031215613d8457600080fd5b613d8d856137d7565b9350613d9b602086016137d7565b92506040850135915060608501356001600160401b03811115613dbd57600080fd5b8501601f81018713613dce57600080fd5b613ddd87823560208401613aba565b91505092959194509250565b600080600060608486031215613dfe57600080fd5b505081359360208301359350604090920135919050565b60008060008060408587031215613e2b57600080fd5b84356001600160401b0380821115613e4257600080fd5b613e4e888389016139a6565b90965094506020870135915080821115613e6757600080fd5b50613e74878288016139a6565b95989497509550505050565b60408152825160408201526020830151606082015260408301516080820152606083015160a0820152608083015160c082015260a083015160e0820152600060c084015160e0610100840152613eda61012084018261377f565b9150508260208301529392505050565b600080600060608486031215613eff57600080fd5b613f08846137d7565b95602085013595506040909401359392505050565b60008060408385031215613f3057600080fd5b82356001600160401b03811115613f4657600080fd5b613f5285828601613b2f565b95602094909401359450505050565b60008060408385031215613f7457600080fd5b613f7d836137d7565b915061399d602084016137d7565b600181811c90821680613f9f57607f821691505b602082108103613fbf57634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526026908201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b601f82111561098057600081815260208120601f850160051c810160208610156140485750805b601f850160051c820191505b81811015611c2d57828155600101614054565b6001600160401b0383111561407e5761407e613aa4565b6140928361408c8354613f8b565b83614021565b6000601f8411600181146140c657600085156140ae5750838201355b600019600387901b1c1916600186901b178355612200565b600083815260209020601f19861690835b828110156140f757868501358255602094850194600190920191016140d7565b50868210156141145760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000614169604083018486614126565b95945050505050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176107ac576107ac6141c0565b634e487b7160e01b600052601260045260246000fd5b600082614212576142126141ed565b500490565b60008235609e1983360301811261422d57600080fd5b9190910192915050565b6000808335601e1984360301811261424e57600080fd5b8301803591506001600160401b0382111561426857600080fd5b602001915036819003821315610b7f57600080fd5b60006001820161428f5761428f6141c0565b5060010190565b60208082526021908201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b81516001600160401b038111156142f0576142f0613aa4565b614304816142fe8454613f8b565b84614021565b602080601f83116001811461433957600084156143215750858301515b600019600386901b1c1916600185901b178555611c2d565b600085815260208120601f198616915b8281101561436857888601518255948401946001909101908401614349565b50858210156143865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b85815260a0602082015260006143af60a083018761377f565b604083019590955250606081019290925260809091015292915050565b818103818111156107ac576107ac6141c0565b808201808211156107ac576107ac6141c0565b600081546143ff81613f8b565b80855260206001838116801561441c576001811461443657614464565b60ff1985168884015283151560051b880183019550614464565b866000528260002060005b8581101561445c5781548a8201860152908301908401614441565b890184019650505b505050505092915050565b858152608060208201526000614489608083018688614126565b841515604084015282810360608401526144a381856143f2565b98975050505050505050565b6020815260006128a2602083018486614126565b6020815260006135a060208301846143f2565b6060815260006144ea606083018688614126565b8415156020840152828103604084015261450481856143f2565b979650505050505050565b6000845160206145228285838a0161375b565b8551918401916145358184848a0161375b565b855492019160009061454681613f8b565b6001828116801561455e57600181146145735761459f565b60ff198416875282151583028701945061459f565b896000528560002060005b848110156145975781548982015290830190870161457e565b505082870194505b50929a9950505050505050505050565b6060815260006145c2606083018661377f565b60208301949094525060400152919050565b60006101008a83528960208401528860408401528760608401528660808401528560a08401528060c084015261460c818401866143f2565b9150508260e08301529998505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600082614683576146836141ed565b500690565b600081614697576146976141c0565b506000190190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146d781601785016020880161375b565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161470881602884016020880161375b565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b469083018461377f565b60006020828403121561475957600080fd5b81516135a08161372856fea2646970667358221220233a5906567ce64c1d91905e31bc5c1b2127e3da28e111ca9cac366662c31b1c64736f6c63430008110033a2646970667358221220be8e323dcc2c4a26a714a82d320221d2aa71c7d5ce67f9908e574e34d4153eeb64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "factoryAddress": "Address of the factory able to call the deploy function"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Factory Constructor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2678,
        "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)2673_storage)"
      },
      {
        "astId": 2992,
        "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5388_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5388_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5388_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)2673_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)2673_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5388_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5387,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5087_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)2673_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 2670,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 2672,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5087_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5082,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5086,
            "contract": "contracts/Factory/RAIR721_Deployer.sol:RAIR721_Deployer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}