{
  "address": "0xB1A91Ba11B92502848c1684517a2806100c6d3C0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deploymentIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deploymentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "deploymentName",
          "type": "string"
        }
      ],
      "name": "DeployedContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bb6f805fc61c2cf718e781ee14ac3e16f821ba30919b559578e208119464cf5",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xB1A91Ba11B92502848c1684517a2806100c6d3C0",
    "transactionIndex": 1,
    "gasUsed": "1916092",
    "logsBloom": "0x
    "blockHash": "0x66dea58cb760e593c00daf64b3cf420b5a903482d203c9d57f96b81cecc61e6a",
    "transactionHash": "0x1bb6f805fc61c2cf718e781ee14ac3e16f821ba30919b559578e208119464cf5",
    "logs": [],
    "blockNumber": 4623768,
    "cumulativeGasUsed": "2906568",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "879d7dc614fda1753afdda4cb397ed7d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deploymentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"deploymentName\",\"type\":\"string\"}],\"name\":\"DeployedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DeployedContract(address,uint256,address,string)\":{\"params\":{\"deployerAddress\":\"Contains the address of the deployer of the contract \",\"deploymentAddress\":\"Contains the address where the contract was deployed\",\"deploymentIndex\":\"Contains the corresponding ID for the deployment\",\"deploymentName\":\"Contains the name of the deployed contract\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"params\":{\"newAdminRole\":\"Contains the new admin role\",\"previousAdminRole\":\"Contains the previous admin role\",\"role\":\"Contains the admin role that we want to use \"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"Contains the account we want to add to a new role\",\"role\":\"Contains the admin role that we want to use \",\"sender\":\"Contains the sender of the role petition\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"Contains the account we want to add to a new role\",\"role\":\"Contains the admin role that we want to use \",\"sender\":\"Contains the sender of the role petition\"}}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Notice that this function override the behavior ofthe getRoleAdmin function inherited from AccessControlEnumerable\",\"params\":{\"role\":\"Contains the role that we want to check\"},\"returns\":{\"_0\":\"bytes32 the rol that in available to change\"}},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Notice that this function override the behavior ofthe getRoleMember function inherited from AccessControlEnumerable\",\"params\":{\"index\":\"Contains the position of the array that we want to verify\",\"role\":\"Contains an specific role to check\"},\"returns\":{\"_0\":\"address of the account with that position of the list of the selected role\"}},\"getRoleMemberCount(bytes32)\":{\"details\":\"Notice that this function override the behavior ofthe getRoleMemberCount function inherited from AccessControlEnumerable\",\"params\":{\"role\":\"Contains an specific role to check\"},\"returns\":{\"_0\":\"uint256 answer the cuantity of accounts with that role\"}},\"grantRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address to use. \",\"role\":\"Contains the role that we want to use \"}},\"hasRole(bytes32,address)\":{\"details\":\"Notice that this function override the behavior ofthe hasrole function inherited from AccessControlEnumerable\",\"params\":{\"account\":\"Contains the address to match with the verification \",\"role\":\"Contains the role we want to verify\"},\"returns\":{\"_0\":\"bool Answer if the account has the input role or not\"}},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address to use.    \",\"role\":\"Contains the role that we want to use \"}},\"revokeRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address to use. \",\"role\":\"Contains the role that we want to use \"}},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"details\":\"This is our deployment mechanism for ERC721 contracts!\",\"params\":{\"amount\":\"The number of tokens sent\",\"from\":\"The owner of the tokens\",\"operator\":\"The ERC777 operator calling the send() function\",\"operatorData\":\"bytes sent from the operator\",\"to\":\"The recipient of the tokens\",\"userData\":\"bytes sent from the send call\"}}},\"title\":\"Our Facet creator for ERC777 contracts\",\"version\":1},\"userdoc\":{\"events\":{\"DeployedContract(address,uint256,address,string)\":{\"notice\":\"This event stores in the blockchain when a new contract is deployed\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when an admin role changes\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when a role is granted\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when a role is revoked\"}},\"kind\":\"user\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"notice\":\"Allows us to see what role is available to modify with the selected role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to use an index position to verify the account that has a role\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to know the total of members that has a role\"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow an admin to asign a new role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"This function allow us to know if an user has or not an specific role\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow an user to quit an owned roleThe account that sends the petition needs to be the same that will renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow an admin to revoke a role to an account\"},\"tokensReceived(address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Function called by an ERC777 when they send tokens\"}},\"notice\":\"You can use this contract to deploy new ERC777 contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory/facets/ERC777ReceiverFacet.sol\":\"ERC777ReceiverFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\\n     */\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n}\\n\",\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Factory/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../common/AccessControl.sol\\\";\\n\\nstruct AppStorage {\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tstring failsafe;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\taddress[] creators;\\n\\tmapping(address => address[]) creatorToContracts;\\n\\tmapping(address => address) contractToCreator;\\n\\tmapping(address => uint) deploymentCostForToken;\\n\\t// Always add new variables at the end of the struct!\\n}\\n\\nlibrary LibAppStorage {\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title \\tAn Access Control contract\\n/// @notice You can use this contract to modify and define the role of an user\\ncontract AccessControlAppStorageEnumerable is Context, AccessControlEnumerable {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\t\\n\\tAppStorage internal s;\\n\\n\\t/// @notice This function allow us to know if an user has or not an specific role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe hasrole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the role we want to verify\\n    /// @param \\taccount Contains the address to match with the verification \\n\\t/// @return bool Answer if the account has the input role or not\\n\\tfunction hasRole(bytes32 role, address account) public view override returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allows us to see what role is available to modify with the selected role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe getRoleAdmin function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the role that we want to check\\n\\t/// @return bytes32 the rol that in available to change\\n\\tfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to use an index position to verify the account that has a role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe getRoleMember function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains an specific role to check\\n    /// @param \\tindex Contains the position of the array that we want to verify\\n\\t/// @return address of the account with that position of the list of the selected role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to know the total of members that has a role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe getRoleMemberCount function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains an specific role to check\\n\\t/// @return uint256 answer the cuantity of accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to use to set a new admin role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _setRoleAdmin function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains an specific role to check\\n    /// @param \\tadminRole Contains the new admin role we want to provide\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal override {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal override {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role of an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _revokeRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _revokeRole(bytes32 role, address account) internal override {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xb4e04ebe7a7d26e3bbc5fa9141094783a306c846f26c54da98b3c0460092c99e\",\"license\":\"GPL-3.0\"},\"contracts/Factory/facets/ERC777ReceiverFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport '../AppStorage.sol';\\nimport '../../tokens/RAIR-ERC721-Diamond.sol';\\n\\n/// @title \\tOur Facet creator for ERC777 contracts\\n/// @notice You can use this contract to deploy new ERC777 contracts\\ncontract ERC777ReceiverFacet is IERC777Recipient, AccessControlAppStorageEnumerable {\\n\\tbytes32 constant ERC777 = keccak256(\\\"ERC777\\\");\\n\\tbytes32 constant OWNER = keccak256(\\\"OWNER\\\");\\n\\t\\n\\t/// @notice This event stores in the blockchain when a new contract is deployed\\n    /// @param\\tdeployerAddress Contains the address of the deployer of the contract \\n    /// @param \\tdeploymentIndex Contains the corresponding ID for the deployment\\n    /// @param \\tdeploymentAddress Contains the address where the contract was deployed\\n\\t/// @param \\tdeploymentName Contains the name of the deployed contract\\n\\tevent DeployedContract(address deployerAddress, uint deploymentIndex, address deploymentAddress, string deploymentName);\\n\\t\\n\\t/// @notice Function called by an ERC777 when they send tokens\\n\\t/// @dev   \\tThis is our deployment mechanism for ERC721 contracts!\\n\\t/// @param \\toperator The ERC777 operator calling the send() function\\n\\t/// @param \\tfrom The owner of the tokens\\n\\t/// @param \\tto The recipient of the tokens\\n\\t/// @param \\tamount The number of tokens sent\\n\\t/// @param \\tuserData bytes sent from the send call\\n\\t/// @param \\toperatorData bytes sent from the operator\\n\\tfunction tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external onlyRole(ERC777) override {\\n\\t\\tAppStorage storage s = LibAppStorage.diamondStorage();\\n\\t\\trequire(amount >= s.deploymentCostForToken[msg.sender], 'RAIR Factory: not enough RAIR tokens to deploy a contract');\\n\\n\\t\\tif (amount - (s.deploymentCostForToken[msg.sender]) > 0) {\\n\\t\\t\\tIERC777(msg.sender).send(from, amount - (s.deploymentCostForToken[msg.sender]), bytes(\\\"RAIR\\\"));\\n\\t\\t}\\n\\t\\taddress[] storage deploymentsFromOwner = s.creatorToContracts[from];\\n\\t\\t\\n\\t\\tif (deploymentsFromOwner.length == 0) {\\n\\t\\t\\ts.creators.push(from);\\n\\t\\t}\\n\\n\\t\\tRAIR_ERC721_Diamond newToken = new RAIR_ERC721_Diamond(string(userData), from, 30000);\\n\\t\\tdeploymentsFromOwner.push(address(newToken));\\n\\t\\ts.contractToCreator[address(newToken)] = from;\\n\\t\\temit DeployedContract(from, deploymentsFromOwner.length - 1, address(newToken), string(userData));\\n\\t}\\n}\",\"keccak256\":\"0x20e1162f10915eabaaeb5685e8542027da3eed0120ec57beec2154d575987082\",\"license\":\"GPL-3.0\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n \\n/// @title  A contract that administrate roles & access\\n/// @notice You can use this contract to modify and define the role of an user\\nabstract contract AccessControlEnumerable is Context {\\t\\n    /// @notice This event stores in the blockchain when an admin role changes\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  previousAdminRole Contains the previous admin role\\n    /// @param  newAdminRole Contains the new admin role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when a role is granted\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /// @notice This event stores in the blockchain when a role is revoked\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /// @notice Allow an user to quit an owned role\\n    /// @notice The account that sends the petition needs to be the same that will renounce to a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use.    \\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to asign a new role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to revoke a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify \\n    /// @param  account Contains the account address to check. \\n    /// @return role in boolean, if the account has the selected role\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\t/// @notice Allow us to verify the branch of roles asociated to an father role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return bytes32 with the child role\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n    /// @notice Check if the account with the index has the desired role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  index Contains the index asociated to an account\\n    /// @return address of the account with the index position in the list of the desired role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return uint256 wuth he total of members with the desired role \\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n    /// @param role Contains the role that we want to use \\n    /// @param adminRole Contains the new admin role to use\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n    /// @notice Grants a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n    /// @notice Revokes a role to an account \\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xdaebcf9440203930cebc6e8decfbddac015b0fda8ebd26b18d6bb8d6af0ffeee\",\"license\":\"GPL-3.0\"},\"contracts/diamondStandard/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x10884024af2c0f7deca0fac4ddf84e76da5dba35b6e02fabeac8ea54c1a5c6f7\",\"license\":\"MIT\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport '../../common/AccessControl.sol';\\n\\nstruct range {\\n\\tuint rangeStart;\\n\\tuint rangeEnd;\\n\\tuint tokensAllowed;\\n\\tuint mintableTokens;\\n\\tuint lockedTokens;\\n\\tuint rangePrice;\\n\\tstring rangeName;\\n}\\n\\nstruct product {\\n\\tuint startingToken;\\n\\tuint endingToken;\\n\\tuint mintableTokens;\\n\\tstring name;\\n\\tuint[] rangeList;\\n}\\n\\nstruct AppStorage721 {\\n\\t// ERC721\\n\\tstring _name;\\n\\tstring _symbol;\\n\\tmapping(uint256 => address) _owners;\\n\\tmapping(address => uint256) _balances;\\n\\tmapping(uint256 => address) _tokenApprovals;\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\n\\t// ERC721 Enumerable\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\n\\tuint256[] _allTokens;\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tstring baseURI;\\n\\taddress factoryAddress;\\n\\tuint16 royaltyFee;\\n\\tproduct[] products;\\n\\trange[] ranges;\\n\\tmapping(uint => uint) tokenToProduct;\\n\\tmapping(uint => uint) tokenToRange;\\n\\tmapping(uint => string) uniqueTokenURI;\\n\\tmapping(uint => string) productURI;\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\n\\tbool appendTokenIndexToBaseURI;\\n\\tmapping(uint => uint[]) tokensByProduct;\\n\\tstring contractMetadataURI;\\n\\tmapping(uint => uint) rangeToProduct;\\n\\tmapping(uint => bool) _minted;\\n\\t// August 2022 - Metadata File Extension Update\\n\\tmapping(uint => string) rangeURI;\\n\\tmapping(uint => bool) appendTokenIndexToRangeURI;\\n\\tstring _metadataExtension;\\n\\t// Always add new variables at the end of the struct\\n}\\n\\nlibrary LibAppStorage721 {\\n\\t/// @notice this funtion set the storage of the diamonds 721 contracts \\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title  This is contract to manage the access control of the RAIR token facet\\n/// @notice You can use this contract to administrate roles of the app market\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from Context\\ncontract AccessControlAppStorageEnumerable721 is Context {\\n\\tAppStorage721 internal s;\\n\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\t/// @notice This event stores in the blockchain when we change an admin role\\n    /// @param  role Contains the role we want to update\\n    /// @param  previousAdminRole contains the previous status of the role\\n\\t/// @param  newAdminRole contains the new status of the role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when we grant a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to grant the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\t/// @notice This event stores in the blockchain when we revoke a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to revoke the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, _msgSender());\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allow us to renounce to a role\\n\\t/// @dev \\tCurrently you can only renounce to your own roles\\n\\t/// @param \\trole Contains the role to remove from our account\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction renounceRole(bytes32 role, address account) public {\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\t/// @return bool that indicates if an account has or not a role\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allow us to check the admin role that contains a role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return bytes that indicates if an account has or not an admin role\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to check the address of an indexed position for the role list\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\tindex Contains the indexed position to verify inside the role members list\\n\\t/// @return address that indicates the address indexed in that position\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to check total members that has an selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return uint256 that indicates the total accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to modify a rol and set it as an admin role\\n\\t/// @param \\trole Contains the role that we want to modify\\n\\t/// @param \\tadminRole Contains the admin role that we want to set\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x8d36cbe7a75ffb8f011626f88c6287cb99b291b7b9b15cec90d9b283a25c736c\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR-ERC721-Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\n// Interfaces\\n//import \\\"@openzeppelin/contracts/utils/introspection/IERC1820Registry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nimport \\\"../diamondStandard/interfaces/IDiamondLoupe.sol\\\";\\n\\nimport './RAIR Token Facets/AppStorage.sol';\\n\\n/// @title  RAIR 721 Diamond\\n/// @notice Diamond Contract implementing the bare minimum ERC-721 features\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721 & ERC165\\ncontract RAIR_ERC721_Diamond is AccessControlAppStorageEnumerable721, ERC165 {\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\tbytes32 public constant MINTER = keccak256(\\\"MINTER\\\");\\n\\tbytes32 public constant TRADER = keccak256(\\\"TRADER\\\");\\n\\tbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\t\\n\\t/// @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n\\tconstructor(string memory name_, address creatorAddress_, uint16 creatorRoyalty_) {\\n\\t\\ts._name = name_;\\n\\t\\ts._symbol = \\\"RAIR\\\";\\n\\t\\t\\n\\t\\ts.factoryAddress = msg.sender;\\n\\t\\ts.royaltyFee = creatorRoyalty_;\\n\\t\\t_setRoleAdmin(MINTER, CREATOR);\\n\\t\\t_setRoleAdmin(TRADER, CREATOR);\\n\\t\\t_grantRole(CREATOR, creatorAddress_);\\n\\t\\t_grantRole(MINTER, creatorAddress_);\\n\\t\\t_grantRole(TRADER, creatorAddress_);\\n\\t}\\n\\n\\t/// @notice This function allows us to know the factory address \\n    /// @return address Contains the address of the factory contract\\n\\tfunction getFactoryAddress() public view returns (address) {\\n\\t\\treturn s.factoryAddress;\\n\\t}\\n\\n\\t/// @notice This function allows us to know the URI of the contract \\n    /// @return address Contains the string with all the URI, this string is saved in memory \\n\\tfunction contractURI() public view returns (string memory) {\\n\\t\\treturn s.contractMetadataURI;\\n\\t}\\n\\n\\t/// @notice This function allows us to know if and interface is suported\\n\\t/// @param \\tinterfaceId Contains the facet addresses and function selectors\\n\\t/// @return bool contains the value for the interface, it could be true or false\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n        \\tinterfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n\\tfallback() external {\\n\\t\\taddress facet = IDiamondLoupe(s.factoryAddress).facetAddress(msg.sig);\\n\\t\\tassembly {\\n\\t\\t\\t// copy function selector and any arguments\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\t\\t\\t// execute function call using the facet\\n\\t\\t\\tlet result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n\\t\\t\\t// get any return value\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\t\\t\\t// return any return value or error back to the caller\\n\\t\\t\\tswitch result\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xccbc6b9b3fe4fbc24f8abf73c7cb2459b13d0e3ba0751579609f1c32119b1200\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121c5806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000925760003560e01c80639010d07c11620000625780639010d07c146200011757806391d148541462000147578063ca15c873146200016f578063d547741f146200018657600080fd5b806223de291462000097578063248a9ca314620000b05780632f2ff15d14620000e957806336568abe1462000100575b600080fd5b620000ae620000a836600462000b66565b6200019d565b005b620000d6620000c136600462000c1e565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b620000ae620000fa36600462000c38565b620004a0565b620000ae6200011136600462000c38565b620004cf565b6200012e6200012836600462000c67565b62000551565b6040516001600160a01b039091168152602001620000e0565b6200015e6200015836600462000c38565b62000574565b6040519015158152602001620000e0565b620000d66200018036600462000c1e565b6200059d565b620000ae6200019736600462000c38565b620005b6565b7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230620001ca8133620005e0565b33600090815260066020526040812054871015620002555760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b33600090815260068201602052604081205462000273908962000ca0565b11156200031157336000818152600683016020526040902054639bd9bbc6908b90620002a0908b62000ca0565b6040805180820182526004808252632920a4a960e11b602083015291516001600160e01b031960e087901b168152620002dc9493920162000d0a565b600060405180830381600087803b158015620002f757600080fd5b505af11580156200030c573d6000803e3d6000fd5b505050505b6001600160a01b0389166000908152600482016020526040812080549091036200036657600382018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038c161790555b600087878c6175306040516200037c9062000aef565b6200038b949392919062000d65565b604051809103906000f080158015620003a8573d6000803e3d6000fd5b50905081819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055508a836005016000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fb1bf8414d7fb85ef593239c1db589dffe8753ca97f373e492a269ec8c1e975538b6001848054905062000474919062000ca0565b838b8b6040516200048a95949392919062000da0565b60405180910390a1505050505050505050505050565b600082815260208190526040902060010154620004be8133620005e0565b620004ca83836200064f565b505050565b6001600160a01b0381163314620005415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200024c565b6200054d8282620006ed565b5050565b60008281526002602052604081206200056b90836200076b565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206200056e9062000779565b600082815260208190526040902060010154620005d48133620005e0565b620004ca8383620006ed565b620005ec828262000574565b6200054d5762000607816001600160a01b0316601462000784565b6200061483602062000784565b6040516020016200062792919062000de1565b60408051601f198184030181529082905262461bcd60e51b82526200024c9160040162000e5a565b6200065b828262000574565b6200054d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620006933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600260205260409020620004ca90826200093e565b620006f9828262000574565b156200054d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600260205260409020620004ca908262000955565b60006200056b83836200096c565b60006200056e825490565b606060006200079583600262000e6f565b620007a290600262000e89565b67ffffffffffffffff811115620007bd57620007bd62000e9f565b6040519080825280601f01601f191660200182016040528015620007e8576020820181803683370190505b509050600360fc1b8160008151811062000806576200080662000eb5565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000838576200083862000eb5565b60200101906001600160f81b031916908160001a90535060006200085e84600262000e6f565b6200086b90600162000e89565b90505b6001811115620008ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620008a357620008a362000eb5565b1a60f81b828281518110620008bc57620008bc62000eb5565b60200101906001600160f81b031916908160001a90535060049490941c93620008e58162000ecb565b90506200086e565b5083156200056b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200024c565b60006200056b836001600160a01b03841662000999565b60006200056b836001600160a01b038416620009eb565b600082600001828154811062000986576200098662000eb5565b9060005260206000200154905092915050565b6000818152600183016020526040812054620009e2575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200056e565b5060006200056e565b6000818152600183016020526040812054801562000ae457600062000a1260018362000ca0565b855490915060009062000a289060019062000ca0565b905081811462000a9457600086600001828154811062000a4c5762000a4c62000eb5565b906000526020600020015490508087600001848154811062000a725762000a7262000eb5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000aa85762000aa862000ee5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200056e565b60009150506200056e565b6112948062000efc83390190565b80356001600160a01b038116811462000b1557600080fd5b919050565b60008083601f84011262000b2d57600080fd5b50813567ffffffffffffffff81111562000b4657600080fd5b60208301915083602082850101111562000b5f57600080fd5b9250929050565b60008060008060008060008060c0898b03121562000b8357600080fd5b62000b8e8962000afd565b975062000b9e60208a0162000afd565b965062000bae60408a0162000afd565b955060608901359450608089013567ffffffffffffffff8082111562000bd357600080fd5b62000be18c838d0162000b1a565b909650945060a08b013591508082111562000bfb57600080fd5b5062000c0a8b828c0162000b1a565b999c989b5096995094979396929594505050565b60006020828403121562000c3157600080fd5b5035919050565b6000806040838503121562000c4c57600080fd5b8235915062000c5e6020840162000afd565b90509250929050565b6000806040838503121562000c7b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b818103818111156200056e576200056e62000c8a565b60005b8381101562000cd357818101518382015260200162000cb9565b50506000910152565b6000815180845262000cf681602086016020860162000cb6565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600062000d33606083018462000cdc565b95945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062000d7b60608301868862000d3c565b6001600160a01b039490941660208301525061ffff9190911660409091015292915050565b6001600160a01b038681168252602082018690528416604082015260806060820181905260009062000dd6908301848662000d3c565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000e1b81601785016020880162000cb6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000e4e81602884016020880162000cb6565b01602801949350505050565b6020815260006200056b602083018462000cdc565b80820281158282048414176200056e576200056e62000c8a565b808201808211156200056e576200056e62000c8a565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008162000edd5762000edd62000c8a565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b506040516200129438038062001294833981016040819052620000349162000316565b60006200004284826200049e565b506040805180820190915260048152632920a4a960e11b60208201526001906200006d90826200049e565b50600d80546001600160b01b0319163361ffff60a01b191617600160a01b61ffff841602179055620000be600080516020620012548339815191526000805160206200123483398151915262000142565b620000e8600080516020620012748339815191526000805160206200123483398151915262000142565b6200010360008051602062001234833981519152836200018d565b6200011e60008051602062001254833981519152836200018d565b6200013960008051602062001274833981519152836200018d565b5050506200056a565b6000828152600a6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000199828262000233565b6200022f576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206200022d908262000260565b505b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b600062000277836001600160a01b0384166200027e565b9392505050565b6000818152600183016020526040812054620002c7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200025a565b5060006200025a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002fe57600080fd5b919050565b805161ffff81168114620002fe57600080fd5b6000806000606084860312156200032c57600080fd5b83516001600160401b03808211156200034457600080fd5b818601915086601f8301126200035957600080fd5b8151818111156200036e576200036e620002d0565b604051601f8201601f19908116603f01168101908382118183101715620003995762000399620002d0565b81604052828152602093508984848701011115620003b657600080fd5b600091505b82821015620003da5784820184015181830185015290830190620003bb565b6000848483010152809750505050620003f5818701620002e6565b93505050620004076040850162000303565b90509250925092565b600181811c908216806200042557607f821691505b6020821081036200044657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022d57600081815260208120601f850160051c81016020861015620004755750805b601f850160051c820191505b81811015620004965782815560010162000481565b505050505050565b81516001600160401b03811115620004ba57620004ba620002d0565b620004d281620004cb845462000410565b846200044c565b602080601f8311600181146200050a5760008415620004f15750858301515b600019600386901b1c1916600185901b17855562000496565b600085815260208120601f198616915b828110156200053b578886015182559484019460019091019084016200051a565b50858210156200055a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610cba806200057a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a217fddf1161008c578063d547741f11610066578063d547741f1461029a578063e4fbb609146102ad578063e8a3d485146102d4578063fe6d8124146102e9576100ea565b8063a217fddf1461026e578063a9c2e36c14610276578063ca15c87314610287576100ea565b80632f2ff15d116100c85780632f2ff15d1461020a57806336568abe1461021d5780639010d07c1461023057806391d148541461025b576100ea565b806301ffc9a71461018a578063175c4ef8146101b2578063248a9ca3146101e7575b600d546040516366ffd66360e11b8152600080356001600160e01b0319166004830152916001600160a01b03169063cdffacc690602401602060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101629190610a20565b90503660008037600080366000845af43d6000803e808015610183573d6000f35b3d6000fd5b005b61019d610198366004610a3d565b610310565b60405190151581526020015b60405180910390f35b6101d97f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016101a9565b6101d96101f5366004610a67565b6000908152600a602052604090206001015490565b610188610218366004610a80565b61037d565b61018861022b366004610a80565b6103a8565b61024361023e366004610ab0565b61042b565b6040516001600160a01b0390911681526020016101a9565b61019d610269366004610a80565b61044a565b6101d9600081565b600d546001600160a01b0316610243565b6101d9610295366004610a67565b610475565b6101886102a8366004610a80565b61048c565b6101d97f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6102dc6104b2565b6040516101a99190610af6565b6101d97ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982166380ac58cd60e01b148061034157506001600160e01b03198216635b5e139f60e01b145b8061035c57506001600160e01b0319821663780e9d6360e01b145b8061037757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600a60205260409020600101546103998133610547565b6103a383836105ab565b505050565b6001600160a01b038116331461041d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104278282610645565b5050565b6000828152600b6020526040812061044390836106c0565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600b60205260408120610377906106cc565b6000828152600a60205260409020600101546104a88133610547565b6103a38383610645565b6060600060170180546104c490610b29565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090610b29565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050905090565b610551828261044a565b61042757610569816001600160a01b031660146106d6565b6105748360206106d6565b604051602001610585929190610b63565b60408051601f198184030181529082905262461bcd60e51b825261041491600401610af6565b6105b5828261044a565b610427576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556105ed3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103a39082610872565b61064f828261044a565b15610427576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206103a39082610887565b6000610443838361089c565b6000610377825490565b606060006106e5836002610bee565b6106f0906002610c05565b67ffffffffffffffff81111561070857610708610c18565b6040519080825280601f01601f191660200182016040528015610732576020820181803683370190505b509050600360fc1b8160008151811061074d5761074d610c2e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061077c5761077c610c2e565b60200101906001600160f81b031916908160001a90535060006107a0846002610bee565b6107ab906001610c05565b90505b6001811115610823576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106107df576107df610c2e565b1a60f81b8282815181106107f5576107f5610c2e565b60200101906001600160f81b031916908160001a90535060049490941c9361081c81610c44565b90506107ae565b5083156104435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610414565b6000610443836001600160a01b0384166108c6565b6000610443836001600160a01b038416610915565b60008260000182815481106108b3576108b3610c2e565b9060005260206000200154905092915050565b600081815260018301602052604081205461090d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610377565b506000610377565b600081815260018301602052604081205480156109fe576000610939600183610c5b565b855490915060009061094d90600190610c5b565b90508181146109b257600086600001828154811061096d5761096d610c2e565b906000526020600020015490508087600001848154811061099057610990610c2e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806109c3576109c3610c6e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610377565b6000915050610377565b6001600160a01b0381168114610a1d57600080fd5b50565b600060208284031215610a3257600080fd5b815161044381610a08565b600060208284031215610a4f57600080fd5b81356001600160e01b03198116811461044357600080fd5b600060208284031215610a7957600080fd5b5035919050565b60008060408385031215610a9357600080fd5b823591506020830135610aa581610a08565b809150509250929050565b60008060408385031215610ac357600080fd5b50508035926020909101359150565b60005b83811015610aed578181015183820152602001610ad5565b50506000910152565b6020815260008251806020840152610b15816040850160208701610ad2565b601f01601f19169190910160400192915050565b600181811c90821680610b3d57607f821691505b602082108103610b5d57634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b9b816017850160208801610ad2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610bcc816028840160208801610ad2565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761037757610377610bd8565b8082018082111561037757610377610bd8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610c5357610c53610bd8565b506000190190565b8181038181111561037757610377610bd8565b634e487b7160e01b600052603160045260246000fdfea264697066735822122083d48c2cc5b448827c94b5419003a60a2ec379e0ed1ae2ed26ed47237b92bf7464736f6c634300081300333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fcea26469706673582212207a5735e317e4fae6c6f59b129ee293495158178ecae3dfb8ad0175ce56bcaaeb64736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000925760003560e01c80639010d07c11620000625780639010d07c146200011757806391d148541462000147578063ca15c873146200016f578063d547741f146200018657600080fd5b806223de291462000097578063248a9ca314620000b05780632f2ff15d14620000e957806336568abe1462000100575b600080fd5b620000ae620000a836600462000b66565b6200019d565b005b620000d6620000c136600462000c1e565b60009081526020819052604090206001015490565b6040519081526020015b60405180910390f35b620000ae620000fa36600462000c38565b620004a0565b620000ae6200011136600462000c38565b620004cf565b6200012e6200012836600462000c67565b62000551565b6040516001600160a01b039091168152602001620000e0565b6200015e6200015836600462000c38565b62000574565b6040519015158152602001620000e0565b620000d66200018036600462000c1e565b6200059d565b620000ae6200019736600462000c38565b620005b6565b7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230620001ca8133620005e0565b33600090815260066020526040812054871015620002555760405162461bcd60e51b815260206004820152603960248201527f5241495220466163746f72793a206e6f7420656e6f756768205241495220746f60448201527f6b656e7320746f206465706c6f79206120636f6e74726163740000000000000060648201526084015b60405180910390fd5b33600090815260068201602052604081205462000273908962000ca0565b11156200031157336000818152600683016020526040902054639bd9bbc6908b90620002a0908b62000ca0565b6040805180820182526004808252632920a4a960e11b602083015291516001600160e01b031960e087901b168152620002dc9493920162000d0a565b600060405180830381600087803b158015620002f757600080fd5b505af11580156200030c573d6000803e3d6000fd5b505050505b6001600160a01b0389166000908152600482016020526040812080549091036200036657600382018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038c161790555b600087878c6175306040516200037c9062000aef565b6200038b949392919062000d65565b604051809103906000f080158015620003a8573d6000803e3d6000fd5b50905081819080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055508a836005016000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507fb1bf8414d7fb85ef593239c1db589dffe8753ca97f373e492a269ec8c1e975538b6001848054905062000474919062000ca0565b838b8b6040516200048a95949392919062000da0565b60405180910390a1505050505050505050505050565b600082815260208190526040902060010154620004be8133620005e0565b620004ca83836200064f565b505050565b6001600160a01b0381163314620005415760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016200024c565b6200054d8282620006ed565b5050565b60008281526002602052604081206200056b90836200076b565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206200056e9062000779565b600082815260208190526040902060010154620005d48133620005e0565b620004ca8383620006ed565b620005ec828262000574565b6200054d5762000607816001600160a01b0316601462000784565b6200061483602062000784565b6040516020016200062792919062000de1565b60408051601f198184030181529082905262461bcd60e51b82526200024c9160040162000e5a565b6200065b828262000574565b6200054d576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620006933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600260205260409020620004ca90826200093e565b620006f9828262000574565b156200054d576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600260205260409020620004ca908262000955565b60006200056b83836200096c565b60006200056e825490565b606060006200079583600262000e6f565b620007a290600262000e89565b67ffffffffffffffff811115620007bd57620007bd62000e9f565b6040519080825280601f01601f191660200182016040528015620007e8576020820181803683370190505b509050600360fc1b8160008151811062000806576200080662000eb5565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000838576200083862000eb5565b60200101906001600160f81b031916908160001a90535060006200085e84600262000e6f565b6200086b90600162000e89565b90505b6001811115620008ed576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620008a357620008a362000eb5565b1a60f81b828281518110620008bc57620008bc62000eb5565b60200101906001600160f81b031916908160001a90535060049490941c93620008e58162000ecb565b90506200086e565b5083156200056b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016200024c565b60006200056b836001600160a01b03841662000999565b60006200056b836001600160a01b038416620009eb565b600082600001828154811062000986576200098662000eb5565b9060005260206000200154905092915050565b6000818152600183016020526040812054620009e2575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200056e565b5060006200056e565b6000818152600183016020526040812054801562000ae457600062000a1260018362000ca0565b855490915060009062000a289060019062000ca0565b905081811462000a9457600086600001828154811062000a4c5762000a4c62000eb5565b906000526020600020015490508087600001848154811062000a725762000a7262000eb5565b6000918252602080832090910192909255918252600188019052604090208390555b855486908062000aa85762000aa862000ee5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200056e565b60009150506200056e565b6112948062000efc83390190565b80356001600160a01b038116811462000b1557600080fd5b919050565b60008083601f84011262000b2d57600080fd5b50813567ffffffffffffffff81111562000b4657600080fd5b60208301915083602082850101111562000b5f57600080fd5b9250929050565b60008060008060008060008060c0898b03121562000b8357600080fd5b62000b8e8962000afd565b975062000b9e60208a0162000afd565b965062000bae60408a0162000afd565b955060608901359450608089013567ffffffffffffffff8082111562000bd357600080fd5b62000be18c838d0162000b1a565b909650945060a08b013591508082111562000bfb57600080fd5b5062000c0a8b828c0162000b1a565b999c989b5096995094979396929594505050565b60006020828403121562000c3157600080fd5b5035919050565b6000806040838503121562000c4c57600080fd5b8235915062000c5e6020840162000afd565b90509250929050565b6000806040838503121562000c7b57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b818103818111156200056e576200056e62000c8a565b60005b8381101562000cd357818101518382015260200162000cb9565b50506000910152565b6000815180845262000cf681602086016020860162000cb6565b601f01601f19169290920160200192915050565b60018060a01b038416815282602082015260606040820152600062000d33606083018462000cdc565b95945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600062000d7b60608301868862000d3c565b6001600160a01b039490941660208301525061ffff9190911660409091015292915050565b6001600160a01b038681168252602082018690528416604082015260806060820181905260009062000dd6908301848662000d3c565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000e1b81601785016020880162000cb6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000e4e81602884016020880162000cb6565b01602801949350505050565b6020815260006200056b602083018462000cdc565b80820281158282048414176200056e576200056e62000c8a565b808201808211156200056e576200056e62000c8a565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008162000edd5762000edd62000c8a565b506000190190565b634e487b7160e01b600052603160045260246000fdfe60806040523480156200001157600080fd5b506040516200129438038062001294833981016040819052620000349162000316565b60006200004284826200049e565b506040805180820190915260048152632920a4a960e11b60208201526001906200006d90826200049e565b50600d80546001600160b01b0319163361ffff60a01b191617600160a01b61ffff841602179055620000be600080516020620012548339815191526000805160206200123483398151915262000142565b620000e8600080516020620012748339815191526000805160206200123483398151915262000142565b6200010360008051602062001234833981519152836200018d565b6200011e60008051602062001254833981519152836200018d565b6200013960008051602062001274833981519152836200018d565b5050506200056a565b6000828152600a6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b62000199828262000233565b6200022f576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206200022d908262000260565b505b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b600062000277836001600160a01b0384166200027e565b9392505050565b6000818152600183016020526040812054620002c7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200025a565b5060006200025a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002fe57600080fd5b919050565b805161ffff81168114620002fe57600080fd5b6000806000606084860312156200032c57600080fd5b83516001600160401b03808211156200034457600080fd5b818601915086601f8301126200035957600080fd5b8151818111156200036e576200036e620002d0565b604051601f8201601f19908116603f01168101908382118183101715620003995762000399620002d0565b81604052828152602093508984848701011115620003b657600080fd5b600091505b82821015620003da5784820184015181830185015290830190620003bb565b6000848483010152809750505050620003f5818701620002e6565b93505050620004076040850162000303565b90509250925092565b600181811c908216806200042557607f821691505b6020821081036200044657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200022d57600081815260208120601f850160051c81016020861015620004755750805b601f850160051c820191505b81811015620004965782815560010162000481565b505050505050565b81516001600160401b03811115620004ba57620004ba620002d0565b620004d281620004cb845462000410565b846200044c565b602080601f8311600181146200050a5760008415620004f15750858301515b600019600386901b1c1916600185901b17855562000496565b600085815260208120601f198616915b828110156200053b578886015182559484019460019091019084016200051a565b50858210156200055a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610cba806200057a6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a217fddf1161008c578063d547741f11610066578063d547741f1461029a578063e4fbb609146102ad578063e8a3d485146102d4578063fe6d8124146102e9576100ea565b8063a217fddf1461026e578063a9c2e36c14610276578063ca15c87314610287576100ea565b80632f2ff15d116100c85780632f2ff15d1461020a57806336568abe1461021d5780639010d07c1461023057806391d148541461025b576100ea565b806301ffc9a71461018a578063175c4ef8146101b2578063248a9ca3146101e7575b600d546040516366ffd66360e11b8152600080356001600160e01b0319166004830152916001600160a01b03169063cdffacc690602401602060405180830381865afa15801561013e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101629190610a20565b90503660008037600080366000845af43d6000803e808015610183573d6000f35b3d6000fd5b005b61019d610198366004610a3d565b610310565b60405190151581526020015b60405180910390f35b6101d97f872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fce81565b6040519081526020016101a9565b6101d96101f5366004610a67565b6000908152600a602052604090206001015490565b610188610218366004610a80565b61037d565b61018861022b366004610a80565b6103a8565b61024361023e366004610ab0565b61042b565b6040516001600160a01b0390911681526020016101a9565b61019d610269366004610a80565b61044a565b6101d9600081565b600d546001600160a01b0316610243565b6101d9610295366004610a67565b610475565b6101886102a8366004610a80565b61048c565b6101d97f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6102dc6104b2565b6040516101a99190610af6565b6101d97ff0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc981565b60006001600160e01b031982166380ac58cd60e01b148061034157506001600160e01b03198216635b5e139f60e01b145b8061035c57506001600160e01b0319821663780e9d6360e01b145b8061037757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152600a60205260409020600101546103998133610547565b6103a383836105ab565b505050565b6001600160a01b038116331461041d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104278282610645565b5050565b6000828152600b6020526040812061044390836106c0565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000818152600b60205260408120610377906106cc565b6000828152600a60205260409020600101546104a88133610547565b6103a38383610645565b6060600060170180546104c490610b29565b80601f01602080910402602001604051908101604052809291908181526020018280546104f090610b29565b801561053d5780601f106105125761010080835404028352916020019161053d565b820191906000526020600020905b81548152906001019060200180831161052057829003601f168201915b5050505050905090565b610551828261044a565b61042757610569816001600160a01b031660146106d6565b6105748360206106d6565b604051602001610585929190610b63565b60408051601f198184030181529082905262461bcd60e51b825261041491600401610af6565b6105b5828261044a565b610427576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556105ed3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103a39082610872565b61064f828261044a565b15610427576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206103a39082610887565b6000610443838361089c565b6000610377825490565b606060006106e5836002610bee565b6106f0906002610c05565b67ffffffffffffffff81111561070857610708610c18565b6040519080825280601f01601f191660200182016040528015610732576020820181803683370190505b509050600360fc1b8160008151811061074d5761074d610c2e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061077c5761077c610c2e565b60200101906001600160f81b031916908160001a90535060006107a0846002610bee565b6107ab906001610c05565b90505b6001811115610823576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106107df576107df610c2e565b1a60f81b8282815181106107f5576107f5610c2e565b60200101906001600160f81b031916908160001a90535060049490941c9361081c81610c44565b90506107ae565b5083156104435760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610414565b6000610443836001600160a01b0384166108c6565b6000610443836001600160a01b038416610915565b60008260000182815481106108b3576108b3610c2e565b9060005260206000200154905092915050565b600081815260018301602052604081205461090d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610377565b506000610377565b600081815260018301602052604081205480156109fe576000610939600183610c5b565b855490915060009061094d90600190610c5b565b90508181146109b257600086600001828154811061096d5761096d610c2e565b906000526020600020015490508087600001848154811061099057610990610c2e565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806109c3576109c3610c6e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610377565b6000915050610377565b6001600160a01b0381168114610a1d57600080fd5b50565b600060208284031215610a3257600080fd5b815161044381610a08565b600060208284031215610a4f57600080fd5b81356001600160e01b03198116811461044357600080fd5b600060208284031215610a7957600080fd5b5035919050565b60008060408385031215610a9357600080fd5b823591506020830135610aa581610a08565b809150509250929050565b60008060408385031215610ac357600080fd5b50508035926020909101359150565b60005b83811015610aed578181015183820152602001610ad5565b50506000910152565b6020815260008251806020840152610b15816040850160208701610ad2565b601f01601f19169190910160400192915050565b600181811c90821680610b3d57607f821691505b602082108103610b5d57634e487b7160e01b600052602260045260246000fd5b50919050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610b9b816017850160208801610ad2565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610bcc816028840160208801610ad2565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761037757610377610bd8565b8082018082111561037757610377610bd8565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610c5357610c53610bd8565b506000190190565b8181038181111561037757610377610bd8565b634e487b7160e01b600052603160045260246000fdfea264697066735822122083d48c2cc5b448827c94b5419003a60a2ec379e0ed1ae2ed26ed47237b92bf7464736f6c634300081300333c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6f0887ba65ee2024ea881d91b74c2450ef19e1557f03bed3ea9f16b037cbe2dc9872340a532bdd7bb02bea115c1b0f1ba87eac982f5b79b51ac189ffaac1b6fcea26469706673582212207a5735e317e4fae6c6f59b129ee293495158178ecae3dfb8ad0175ce56bcaaeb64736f6c63430008130033",
  "devdoc": {
    "events": {
      "DeployedContract(address,uint256,address,string)": {
        "params": {
          "deployerAddress": "Contains the address of the deployer of the contract ",
          "deploymentAddress": "Contains the address where the contract was deployed",
          "deploymentIndex": "Contains the corresponding ID for the deployment",
          "deploymentName": "Contains the name of the deployed contract"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "params": {
          "newAdminRole": "Contains the new admin role",
          "previousAdminRole": "Contains the previous admin role",
          "role": "Contains the admin role that we want to use "
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "params": {
          "account": "Contains the account we want to add to a new role",
          "role": "Contains the admin role that we want to use ",
          "sender": "Contains the sender of the role petition"
        }
      },
      "RoleRevoked(bytes32,address,address)": {
        "params": {
          "account": "Contains the account we want to add to a new role",
          "role": "Contains the admin role that we want to use ",
          "sender": "Contains the sender of the role petition"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Notice that this function override the behavior ofthe getRoleAdmin function inherited from AccessControlEnumerable",
        "params": {
          "role": "Contains the role that we want to check"
        },
        "returns": {
          "_0": "bytes32 the rol that in available to change"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Notice that this function override the behavior ofthe getRoleMember function inherited from AccessControlEnumerable",
        "params": {
          "index": "Contains the position of the array that we want to verify",
          "role": "Contains an specific role to check"
        },
        "returns": {
          "_0": "address of the account with that position of the list of the selected role"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Notice that this function override the behavior ofthe getRoleMemberCount function inherited from AccessControlEnumerable",
        "params": {
          "role": "Contains an specific role to check"
        },
        "returns": {
          "_0": "uint256 answer the cuantity of accounts with that role"
        }
      },
      "grantRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address to use. ",
          "role": "Contains the role that we want to use "
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Notice that this function override the behavior ofthe hasrole function inherited from AccessControlEnumerable",
        "params": {
          "account": "Contains the address to match with the verification ",
          "role": "Contains the role we want to verify"
        },
        "returns": {
          "_0": "bool Answer if the account has the input role or not"
        }
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address to use.    ",
          "role": "Contains the role that we want to use "
        }
      },
      "revokeRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address to use. ",
          "role": "Contains the role that we want to use "
        }
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "details": "This is our deployment mechanism for ERC721 contracts!",
        "params": {
          "amount": "The number of tokens sent",
          "from": "The owner of the tokens",
          "operator": "The ERC777 operator calling the send() function",
          "operatorData": "bytes sent from the operator",
          "to": "The recipient of the tokens",
          "userData": "bytes sent from the send call"
        }
      }
    },
    "title": "Our Facet creator for ERC777 contracts",
    "version": 1
  },
  "userdoc": {
    "events": {
      "DeployedContract(address,uint256,address,string)": {
        "notice": "This event stores in the blockchain when a new contract is deployed"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when an admin role changes"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when a role is granted"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when a role is revoked"
      }
    },
    "kind": "user",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "notice": "Allows us to see what role is available to modify with the selected role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to use an index position to verify the account that has a role"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to know the total of members that has a role"
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow an admin to asign a new role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "This function allow us to know if an user has or not an specific role"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow an user to quit an owned roleThe account that sends the petition needs to be the same that will renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow an admin to revoke a role to an account"
      },
      "tokensReceived(address,address,address,uint256,bytes,bytes)": {
        "notice": "Function called by an ERC777 when they send tokens"
      }
    },
    "notice": "You can use this contract to deploy new ERC777 contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4573,
        "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4552_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3640_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7394_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3639,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3325_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)4552_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4528,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)"
          },
          {
            "astId": 4530,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "failsafe",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4535,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)"
          },
          {
            "astId": 4538,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "creators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4543,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "creatorToContracts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
          },
          {
            "astId": 4547,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "contractToCreator",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 4551,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "deploymentCostForToken",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)7394_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 7391,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7393,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3320,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3324,
            "contract": "contracts/Factory/facets/ERC777ReceiverFacet.sol:ERC777ReceiverFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}