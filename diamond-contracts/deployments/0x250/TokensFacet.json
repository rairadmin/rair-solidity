{
  "address": "0x4a87675A164C18A58DDC4aA6d4486685D7eDD7cA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceToDeploy",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "responsible",
          "type": "address"
        }
      ],
      "name": "AcceptedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "responsible",
          "type": "address"
        }
      ],
      "name": "RemovedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawTokens",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc777Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_priceToDeploy",
          "type": "uint256"
        }
      ],
      "name": "acceptNewToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        }
      ],
      "name": "getDeploymentCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc777Address",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc777",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe12f3288825c76381494ebdb6e01a27065b7173243dbf939966433b79f815777",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0x4a87675A164C18A58DDC4aA6d4486685D7eDD7cA",
    "transactionIndex": 2,
    "gasUsed": "801244",
    "logsBloom": "0x
    "blockHash": "0x2d5da6f29b5b5b6938585116db78f4b2c94076d261ea88a6ce050551a2e2dd32",
    "transactionHash": "0xe12f3288825c76381494ebdb6e01a27065b7173243dbf939966433b79f815777",
    "logs": [],
    "blockNumber": 4623780,
    "cumulativeGasUsed": "2782196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "597020f27da0c3a6d99dcb42945d060e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceToDeploy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"responsible\",\"type\":\"address\"}],\"name\":\"AcceptedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"responsible\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc777Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_priceToDeploy\",\"type\":\"uint256\"}],\"name\":\"acceptNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"}],\"name\":\"getDeploymentCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc777Address\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc777\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AcceptedToken(address,uint256,address)\":{\"params\":{\"contractAddress\":\"contains the address of the tokens contract \",\"priceToDeploy\":\"contains the deployment cost for the token\",\"responsible\":\"address of the person that implement the new token\"}},\"RemovedToken(address,address)\":{\"params\":{\"erc777\":\"contains the address of the tokens contract to remove\",\"responsible\":\"address of the person that revokes the token\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"params\":{\"newAdminRole\":\"Contains the new admin role\",\"previousAdminRole\":\"Contains the previous admin role\",\"role\":\"Contains the admin role that we want to use \"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"Contains the account we want to add to a new role\",\"role\":\"Contains the admin role that we want to use \",\"sender\":\"Contains the sender of the role petition\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"Contains the account we want to add to a new role\",\"role\":\"Contains the admin role that we want to use \",\"sender\":\"Contains the sender of the role petition\"}},\"WithdrawTokens(address,address,uint256)\":{\"params\":{\"amount\":\"total of tokens to recieve\",\"erc777\":\"contains the address of the tokens contract to withdraw\",\"recipient\":\"address who will recieve the tokens\"}}},\"kind\":\"dev\",\"methods\":{\"acceptNewToken(address,uint256)\":{\"params\":{\"_erc777Address\":\"Address of the new Token\",\"_priceToDeploy\":\"Price of deployment for the new Token\"}},\"getDeploymentCost(address)\":{\"params\":{\"erc777\":\"Contains the facet addresses and function selectors\"},\"returns\":{\"price\":\"\\tShows the price of deployment for the token\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Notice that this function override the behavior ofthe getRoleAdmin function inherited from AccessControlEnumerable\",\"params\":{\"role\":\"Contains the role that we want to check\"},\"returns\":{\"_0\":\"bytes32 the rol that in available to change\"}},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Notice that this function override the behavior ofthe getRoleMember function inherited from AccessControlEnumerable\",\"params\":{\"index\":\"Contains the position of the array that we want to verify\",\"role\":\"Contains an specific role to check\"},\"returns\":{\"_0\":\"address of the account with that position of the list of the selected role\"}},\"getRoleMemberCount(bytes32)\":{\"details\":\"Notice that this function override the behavior ofthe getRoleMemberCount function inherited from AccessControlEnumerable\",\"params\":{\"role\":\"Contains an specific role to check\"},\"returns\":{\"_0\":\"uint256 answer the cuantity of accounts with that role\"}},\"grantRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address to use. \",\"role\":\"Contains the role that we want to use \"}},\"hasRole(bytes32,address)\":{\"details\":\"Notice that this function override the behavior ofthe hasrole function inherited from AccessControlEnumerable\",\"params\":{\"account\":\"Contains the address to match with the verification \",\"role\":\"Contains the role we want to verify\"},\"returns\":{\"_0\":\"bool Answer if the account has the input role or not\"}},\"removeToken(address)\":{\"params\":{\"_erc777Address\":\"Address of the Token\"}},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address to use.    \",\"role\":\"Contains the role that we want to use \"}},\"revokeRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address to use. \",\"role\":\"Contains the role that we want to use \"}},\"withdrawTokens(address,uint256)\":{\"details\":\"If the contract has less than the amount, the ERC777 contract will revertAccessControl makes sure only an OWNER can withdraw\",\"params\":{\"amount\":\"Amount of tokens to withdraw\",\"erc777\":\"Address of the ERC777 contract\"}}},\"title\":\"Our Facet creator for tokens\",\"version\":1},\"userdoc\":{\"events\":{\"AcceptedToken(address,uint256,address)\":{\"notice\":\"This event stores in the blockchain when a new token is indexed as accepted \"},\"RemovedToken(address,address)\":{\"notice\":\"This event stores in the blockchain when a token is revoked\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when an admin role changes\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when a role is granted\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when a role is revoked\"},\"WithdrawTokens(address,address,uint256)\":{\"notice\":\"This event stores in the blockchain when the tokens are withdrawed from the contract\"}},\"kind\":\"user\",\"methods\":{\"acceptNewToken(address,uint256)\":{\"notice\":\"Adds an address to the list of allowed minters\"},\"getDeploymentCost(address)\":{\"notice\":\"Returns the number of required tokens, given an erc777 address\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Allows us to see what role is available to modify with the selected role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to use an index position to verify the account that has a role\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to know the total of members that has a role\"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow an admin to asign a new role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"This function allow us to know if an user has or not an specific role\"},\"removeToken(address)\":{\"notice\":\"Removes an address from the list of allowed minters\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow an user to quit an owned roleThe account that sends the petition needs to be the same that will renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow an admin to revoke a role to an account\"},\"withdrawTokens(address,uint256)\":{\"notice\":\"Transfers tokens from the factory to any of the OWNER addresses\"}},\"notice\":\"You can use this contract to manage the use of tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory/facets/TokensFacet.sol\":\"TokensFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\\n     */\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n}\\n\",\"keccak256\":\"0x79e6094047e40d49efa3c725b7a1519e16c28c46944884b5f6d0fbe89b450f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/Factory/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../common/AccessControl.sol\\\";\\n\\nstruct AppStorage {\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tstring failsafe;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\taddress[] creators;\\n\\tmapping(address => address[]) creatorToContracts;\\n\\tmapping(address => address) contractToCreator;\\n\\tmapping(address => uint) deploymentCostForToken;\\n\\t// Always add new variables at the end of the struct!\\n}\\n\\nlibrary LibAppStorage {\\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title \\tAn Access Control contract\\n/// @notice You can use this contract to modify and define the role of an user\\ncontract AccessControlAppStorageEnumerable is Context, AccessControlEnumerable {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\t\\n\\tAppStorage internal s;\\n\\n\\t/// @notice This function allow us to know if an user has or not an specific role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe hasrole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the role we want to verify\\n    /// @param \\taccount Contains the address to match with the verification \\n\\t/// @return bool Answer if the account has the input role or not\\n\\tfunction hasRole(bytes32 role, address account) public view override returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allows us to see what role is available to modify with the selected role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe getRoleAdmin function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the role that we want to check\\n\\t/// @return bytes32 the rol that in available to change\\n\\tfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to use an index position to verify the account that has a role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe getRoleMember function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains an specific role to check\\n    /// @param \\tindex Contains the position of the array that we want to verify\\n\\t/// @return address of the account with that position of the list of the selected role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to know the total of members that has a role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe getRoleMemberCount function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains an specific role to check\\n\\t/// @return uint256 answer the cuantity of accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to use to set a new admin role\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _setRoleAdmin function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains an specific role to check\\n    /// @param \\tadminRole Contains the new admin role we want to provide\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal override {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal override {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role of an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _revokeRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _revokeRole(bytes32 role, address account) internal override {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0xb4e04ebe7a7d26e3bbc5fa9141094783a306c846f26c54da98b3c0460092c99e\",\"license\":\"GPL-3.0\"},\"contracts/Factory/facets/TokensFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport '../AppStorage.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n/// @title \\tOur Facet creator for tokens\\n/// @notice You can use this contract to manage the use of tokens\\ncontract TokensFacet is AccessControlAppStorageEnumerable {\\n\\tbytes32 constant OWNER = keccak256(\\\"OWNER\\\");\\n\\tbytes32 constant ERC777 = keccak256(\\\"ERC777\\\");\\n\\t\\n\\t/// @notice This event stores in the blockchain when a new token is indexed as accepted \\n    /// @param \\tcontractAddress contains the address of the tokens contract \\n    /// @param \\tpriceToDeploy contains the deployment cost for the token\\n    /// @param \\tresponsible address of the person that implement the new token\\n\\tevent AcceptedToken(address contractAddress, uint priceToDeploy, address responsible);\\n\\t/// @notice This event stores in the blockchain when a token is revoked\\n    /// @param \\terc777 contains the address of the tokens contract to remove\\n    /// @param \\tresponsible address of the person that revokes the token\\n\\tevent RemovedToken(address erc777, address responsible);\\n\\t/// @notice This event stores in the blockchain when the tokens are withdrawed from the contract\\n    /// @param \\trecipient address who will recieve the tokens\\n    /// @param \\terc777 contains the address of the tokens contract to withdraw\\n\\t/// @param \\tamount total of tokens to recieve\\n\\tevent WithdrawTokens(address recipient, address erc777, uint amount);\\n\\n\\t/// @notice Transfers tokens from the factory to any of the OWNER addresses\\n\\t/// @dev \\tIf the contract has less than the amount, the ERC777 contract will revert\\n\\t/// @dev \\tAccessControl makes sure only an OWNER can withdraw\\n\\t/// @param \\terc777\\tAddress of the ERC777 contract\\n\\t/// @param \\tamount\\tAmount of tokens to withdraw\\n\\tfunction withdrawTokens(address erc777, uint amount) public onlyRole(OWNER) {\\n\\t\\trequire(hasRole(ERC777, erc777), \\\"RAIR Factory: Specified contract isn't an approved erc777 contract\\\");\\n\\t\\tIERC777(erc777).send(msg.sender, amount, bytes(\\\"Factory Withdraw\\\"));\\n\\t\\temit WithdrawTokens(msg.sender, erc777, amount);\\n\\t}\\n\\n\\t/// @notice\\tAdds an address to the list of allowed minters\\n\\t/// @param\\t_erc777Address\\tAddress of the new Token\\n\\t/// @param\\t_priceToDeploy\\tPrice of deployment for the new Token\\n\\tfunction acceptNewToken(address _erc777Address, uint _priceToDeploy) public onlyRole(OWNER) {\\n\\t\\tgrantRole(ERC777, _erc777Address);\\n\\t\\ts.deploymentCostForToken[_erc777Address] = _priceToDeploy;\\n\\t\\temit AcceptedToken(_erc777Address, _priceToDeploy, msg.sender);\\n\\t}\\n\\n\\t/// @notice\\tRemoves an address from the list of allowed minters\\n\\t/// @param\\t_erc777Address\\tAddress of the Token\\n\\tfunction removeToken(address _erc777Address) public onlyRole(OWNER) {\\n\\t\\trevokeRole(ERC777, _erc777Address);\\n\\t\\ts.deploymentCostForToken[_erc777Address] = 0;\\n\\t\\temit RemovedToken(_erc777Address, msg.sender);\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of required tokens, given an erc777 address\\n\\t/// @param \\terc777 \\tContains the facet addresses and function selectors\\n\\t/// @return price \\tShows the price of deployment for the token\\n\\tfunction getDeploymentCost(address erc777) public view returns (uint price) {\\n\\t\\tprice = s.deploymentCostForToken[erc777];\\n\\t}\\n}\",\"keccak256\":\"0x7f2c577214095356c8cec10e0ef582960d2e95db32db6cab322bffcf45153400\",\"license\":\"GPL-3.0\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n \\n/// @title  A contract that administrate roles & access\\n/// @notice You can use this contract to modify and define the role of an user\\nabstract contract AccessControlEnumerable is Context {\\t\\n    /// @notice This event stores in the blockchain when an admin role changes\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  previousAdminRole Contains the previous admin role\\n    /// @param  newAdminRole Contains the new admin role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when a role is granted\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /// @notice This event stores in the blockchain when a role is revoked\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /// @notice Allow an user to quit an owned role\\n    /// @notice The account that sends the petition needs to be the same that will renounce to a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use.    \\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to asign a new role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to revoke a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify \\n    /// @param  account Contains the account address to check. \\n    /// @return role in boolean, if the account has the selected role\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\t/// @notice Allow us to verify the branch of roles asociated to an father role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return bytes32 with the child role\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n    /// @notice Check if the account with the index has the desired role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  index Contains the index asociated to an account\\n    /// @return address of the account with the index position in the list of the desired role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return uint256 wuth he total of members with the desired role \\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n    /// @param role Contains the role that we want to use \\n    /// @param adminRole Contains the new admin role to use\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n    /// @notice Grants a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n    /// @notice Revokes a role to an account \\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xdaebcf9440203930cebc6e8decfbddac015b0fda8ebd26b18d6bb8d6af0ffeee\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d88806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80635fa7b584116100715780635fa7b58414610148578063638958dd1461015b5780639010d07c1461016e57806391d1485414610199578063ca15c873146101bc578063d547741f146101cf57600080fd5b806306b091f9146100ae5780631c7d25d1146100c3578063248a9ca3146100ff5780632f2ff15d1461012257806336568abe14610135575b600080fd5b6100c16100bc366004610af2565b6101e2565b005b6100ec6100d1366004610b1c565b6001600160a01b031660009081526006602052604090205490565b6040519081526020015b60405180910390f35b6100ec61010d366004610b37565b60009081526020819052604090206001015490565b6100c1610130366004610b50565b61038f565b6100c1610143366004610b50565b6103ba565b6100c1610156366004610b1c565b610438565b6100c1610169366004610af2565b6104e5565b61018161017c366004610b7c565b610592565b6040516001600160a01b0390911681526020016100f6565b6101ac6101a7366004610b50565b6105b3565b60405190151581526020016100f6565b6100ec6101ca366004610b37565b6105dc565b6100c16101dd366004610b50565b6105f3565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b61020d8133610619565b6102377fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230846105b3565b6102b95760405162461bcd60e51b815260206004820152604260248201527f5241495220466163746f72793a2053706563696669656420636f6e747261637460448201527f2069736e277420616e20617070726f7665642065726337373720636f6e74726160648201526118dd60f21b608482015260a4015b60405180910390fd5b604080518082018252601081526f466163746f727920576974686472617760801b60208201529051634decdde360e11b81526001600160a01b03851691639bd9bbc69161030d913391879190600401610bee565b600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b5050604080513381526001600160a01b03871660208201529081018590527f70082d08c003c5341f2401bec1c2ae1dbcdc29ae17e9cc5633fa617caa8acd4c925060600190505b60405180910390a1505050565b6000828152602081905260409020600101546103ab8133610619565b6103b5838361067d565b505050565b6001600160a01b038116331461042a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102b0565b6104348282610715565b5050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b6104638133610619565b61048d7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230836105f3565b6001600160a01b038216600081815260066020908152604080832092909255815192835233908301527f703f7e3f084d5b8dcc12fddcfd9a70d65b6b21ec7659e4608dbaf4419ede3ad0910160405180910390a15050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b6105108133610619565b61053a7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472308461038f565b6001600160a01b0383166000818152600660209081526040918290208590558151928352820184905233908201527f1dfbc08fdb736bd9ac2161460c84943a6c681b26e3b4184c9456b3a0530f118f90606001610382565b60008281526002602052604081206105aa908361078e565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206105ad9061079a565b60008281526020819052604090206001015461060f8133610619565b6103b58383610715565b61062382826105b3565b6104345761063b816001600160a01b031660146107a4565b6106468360206107a4565b604051602001610657929190610c1e565b60408051601f198184030181529082905262461bcd60e51b82526102b091600401610c93565b61068782826105b3565b610434576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460008281526002602052604090206103b59082610940565b61071f82826105b3565b15610434576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526002602052604090206103b59082610955565b60006105aa838361096a565b60006105ad825490565b606060006107b3836002610cbc565b6107be906002610cd3565b67ffffffffffffffff8111156107d6576107d6610ce6565b6040519080825280601f01601f191660200182016040528015610800576020820181803683370190505b509050600360fc1b8160008151811061081b5761081b610cfc565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061084a5761084a610cfc565b60200101906001600160f81b031916908160001a905350600061086e846002610cbc565b610879906001610cd3565b90505b60018111156108f1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106108ad576108ad610cfc565b1a60f81b8282815181106108c3576108c3610cfc565b60200101906001600160f81b031916908160001a90535060049490941c936108ea81610d12565b905061087c565b5083156105aa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102b0565b60006105aa836001600160a01b038416610994565b60006105aa836001600160a01b0384166109e3565b600082600001828154811061098157610981610cfc565b9060005260206000200154905092915050565b60008181526001830160205260408120546109db575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ad565b5060006105ad565b60008181526001830160205260408120548015610acc576000610a07600183610d29565b8554909150600090610a1b90600190610d29565b9050818114610a80576000866000018281548110610a3b57610a3b610cfc565b9060005260206000200154905080876000018481548110610a5e57610a5e610cfc565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a9157610a91610d3c565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ad565b60009150506105ad565b80356001600160a01b0381168114610aed57600080fd5b919050565b60008060408385031215610b0557600080fd5b610b0e83610ad6565b946020939093013593505050565b600060208284031215610b2e57600080fd5b6105aa82610ad6565b600060208284031215610b4957600080fd5b5035919050565b60008060408385031215610b6357600080fd5b82359150610b7360208401610ad6565b90509250929050565b60008060408385031215610b8f57600080fd5b50508035926020909101359150565b60005b83811015610bb9578181015183820152602001610ba1565b50506000910152565b60008151808452610bda816020860160208601610b9e565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610c156060830184610bc2565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c56816017850160208801610b9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610c87816028840160208801610b9e565b01602801949350505050565b6020815260006105aa6020830184610bc2565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105ad576105ad610ca6565b808201808211156105ad576105ad610ca6565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610d2157610d21610ca6565b506000190190565b818103818111156105ad576105ad610ca6565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208b9ce4dd71fb3952f08b166213465f0d911eed5dca720e2c9cce4b3f667900e164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80635fa7b584116100715780635fa7b58414610148578063638958dd1461015b5780639010d07c1461016e57806391d1485414610199578063ca15c873146101bc578063d547741f146101cf57600080fd5b806306b091f9146100ae5780631c7d25d1146100c3578063248a9ca3146100ff5780632f2ff15d1461012257806336568abe14610135575b600080fd5b6100c16100bc366004610af2565b6101e2565b005b6100ec6100d1366004610b1c565b6001600160a01b031660009081526006602052604090205490565b6040519081526020015b60405180910390f35b6100ec61010d366004610b37565b60009081526020819052604090206001015490565b6100c1610130366004610b50565b61038f565b6100c1610143366004610b50565b6103ba565b6100c1610156366004610b1c565b610438565b6100c1610169366004610af2565b6104e5565b61018161017c366004610b7c565b610592565b6040516001600160a01b0390911681526020016100f6565b6101ac6101a7366004610b50565b6105b3565b60405190151581526020016100f6565b6100ec6101ca366004610b37565b6105dc565b6100c16101dd366004610b50565b6105f3565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b61020d8133610619565b6102377fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230846105b3565b6102b95760405162461bcd60e51b815260206004820152604260248201527f5241495220466163746f72793a2053706563696669656420636f6e747261637460448201527f2069736e277420616e20617070726f7665642065726337373720636f6e74726160648201526118dd60f21b608482015260a4015b60405180910390fd5b604080518082018252601081526f466163746f727920576974686472617760801b60208201529051634decdde360e11b81526001600160a01b03851691639bd9bbc69161030d913391879190600401610bee565b600060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b5050604080513381526001600160a01b03871660208201529081018590527f70082d08c003c5341f2401bec1c2ae1dbcdc29ae17e9cc5633fa617caa8acd4c925060600190505b60405180910390a1505050565b6000828152602081905260409020600101546103ab8133610619565b6103b5838361067d565b505050565b6001600160a01b038116331461042a5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016102b0565b6104348282610715565b5050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b6104638133610619565b61048d7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c147230836105f3565b6001600160a01b038216600081815260066020908152604080832092909255815192835233908301527f703f7e3f084d5b8dcc12fddcfd9a70d65b6b21ec7659e4608dbaf4419ede3ad0910160405180910390a15050565b7f6270edb7c868f86fda4adedba75108201087268ea345934db8bad688e1feb91b6105108133610619565b61053a7fe33cd123f09d9a4e3b34162dcaba99ee0b73fe748beb8ca15f84a66b0c1472308461038f565b6001600160a01b0383166000818152600660209081526040918290208590558151928352820184905233908201527f1dfbc08fdb736bd9ac2161460c84943a6c681b26e3b4184c9456b3a0530f118f90606001610382565b60008281526002602052604081206105aa908361078e565b90505b92915050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526002602052604081206105ad9061079a565b60008281526020819052604090206001015461060f8133610619565b6103b58383610715565b61062382826105b3565b6104345761063b816001600160a01b031660146107a4565b6106468360206107a4565b604051602001610657929190610c1e565b60408051601f198184030181529082905262461bcd60e51b82526102b091600401610c93565b61068782826105b3565b610434576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556106bd3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460008281526002602052604090206103b59082610940565b61071f82826105b3565b15610434576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460008281526002602052604090206103b59082610955565b60006105aa838361096a565b60006105ad825490565b606060006107b3836002610cbc565b6107be906002610cd3565b67ffffffffffffffff8111156107d6576107d6610ce6565b6040519080825280601f01601f191660200182016040528015610800576020820181803683370190505b509050600360fc1b8160008151811061081b5761081b610cfc565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061084a5761084a610cfc565b60200101906001600160f81b031916908160001a905350600061086e846002610cbc565b610879906001610cd3565b90505b60018111156108f1576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106108ad576108ad610cfc565b1a60f81b8282815181106108c3576108c3610cfc565b60200101906001600160f81b031916908160001a90535060049490941c936108ea81610d12565b905061087c565b5083156105aa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102b0565b60006105aa836001600160a01b038416610994565b60006105aa836001600160a01b0384166109e3565b600082600001828154811061098157610981610cfc565b9060005260206000200154905092915050565b60008181526001830160205260408120546109db575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ad565b5060006105ad565b60008181526001830160205260408120548015610acc576000610a07600183610d29565b8554909150600090610a1b90600190610d29565b9050818114610a80576000866000018281548110610a3b57610a3b610cfc565b9060005260206000200154905080876000018481548110610a5e57610a5e610cfc565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610a9157610a91610d3c565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105ad565b60009150506105ad565b80356001600160a01b0381168114610aed57600080fd5b919050565b60008060408385031215610b0557600080fd5b610b0e83610ad6565b946020939093013593505050565b600060208284031215610b2e57600080fd5b6105aa82610ad6565b600060208284031215610b4957600080fd5b5035919050565b60008060408385031215610b6357600080fd5b82359150610b7360208401610ad6565b90509250929050565b60008060408385031215610b8f57600080fd5b50508035926020909101359150565b60005b83811015610bb9578181015183820152602001610ba1565b50506000910152565b60008151808452610bda816020860160208601610b9e565b601f01601f19169290920160200192915050565b60018060a01b0384168152826020820152606060408201526000610c156060830184610bc2565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610c56816017850160208801610b9e565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610c87816028840160208801610b9e565b01602801949350505050565b6020815260006105aa6020830184610bc2565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105ad576105ad610ca6565b808201808211156105ad576105ad610ca6565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610d2157610d21610ca6565b506000190190565b818103818111156105ad576105ad610ca6565b634e487b7160e01b600052603160045260246000fdfea26469706673582212208b9ce4dd71fb3952f08b166213465f0d911eed5dca720e2c9cce4b3f667900e164736f6c63430008130033",
  "devdoc": {
    "events": {
      "AcceptedToken(address,uint256,address)": {
        "params": {
          "contractAddress": "contains the address of the tokens contract ",
          "priceToDeploy": "contains the deployment cost for the token",
          "responsible": "address of the person that implement the new token"
        }
      },
      "RemovedToken(address,address)": {
        "params": {
          "erc777": "contains the address of the tokens contract to remove",
          "responsible": "address of the person that revokes the token"
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "params": {
          "newAdminRole": "Contains the new admin role",
          "previousAdminRole": "Contains the previous admin role",
          "role": "Contains the admin role that we want to use "
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "params": {
          "account": "Contains the account we want to add to a new role",
          "role": "Contains the admin role that we want to use ",
          "sender": "Contains the sender of the role petition"
        }
      },
      "RoleRevoked(bytes32,address,address)": {
        "params": {
          "account": "Contains the account we want to add to a new role",
          "role": "Contains the admin role that we want to use ",
          "sender": "Contains the sender of the role petition"
        }
      },
      "WithdrawTokens(address,address,uint256)": {
        "params": {
          "amount": "total of tokens to recieve",
          "erc777": "contains the address of the tokens contract to withdraw",
          "recipient": "address who will recieve the tokens"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptNewToken(address,uint256)": {
        "params": {
          "_erc777Address": "Address of the new Token",
          "_priceToDeploy": "Price of deployment for the new Token"
        }
      },
      "getDeploymentCost(address)": {
        "params": {
          "erc777": "Contains the facet addresses and function selectors"
        },
        "returns": {
          "price": "\tShows the price of deployment for the token"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Notice that this function override the behavior ofthe getRoleAdmin function inherited from AccessControlEnumerable",
        "params": {
          "role": "Contains the role that we want to check"
        },
        "returns": {
          "_0": "bytes32 the rol that in available to change"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Notice that this function override the behavior ofthe getRoleMember function inherited from AccessControlEnumerable",
        "params": {
          "index": "Contains the position of the array that we want to verify",
          "role": "Contains an specific role to check"
        },
        "returns": {
          "_0": "address of the account with that position of the list of the selected role"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Notice that this function override the behavior ofthe getRoleMemberCount function inherited from AccessControlEnumerable",
        "params": {
          "role": "Contains an specific role to check"
        },
        "returns": {
          "_0": "uint256 answer the cuantity of accounts with that role"
        }
      },
      "grantRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address to use. ",
          "role": "Contains the role that we want to use "
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Notice that this function override the behavior ofthe hasrole function inherited from AccessControlEnumerable",
        "params": {
          "account": "Contains the address to match with the verification ",
          "role": "Contains the role we want to verify"
        },
        "returns": {
          "_0": "bool Answer if the account has the input role or not"
        }
      },
      "removeToken(address)": {
        "params": {
          "_erc777Address": "Address of the Token"
        }
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address to use.    ",
          "role": "Contains the role that we want to use "
        }
      },
      "revokeRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address to use. ",
          "role": "Contains the role that we want to use "
        }
      },
      "withdrawTokens(address,uint256)": {
        "details": "If the contract has less than the amount, the ERC777 contract will revertAccessControl makes sure only an OWNER can withdraw",
        "params": {
          "amount": "Amount of tokens to withdraw",
          "erc777": "Address of the ERC777 contract"
        }
      }
    },
    "title": "Our Facet creator for tokens",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AcceptedToken(address,uint256,address)": {
        "notice": "This event stores in the blockchain when a new token is indexed as accepted "
      },
      "RemovedToken(address,address)": {
        "notice": "This event stores in the blockchain when a token is revoked"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when an admin role changes"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when a role is granted"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when a role is revoked"
      },
      "WithdrawTokens(address,address,uint256)": {
        "notice": "This event stores in the blockchain when the tokens are withdrawed from the contract"
      }
    },
    "kind": "user",
    "methods": {
      "acceptNewToken(address,uint256)": {
        "notice": "Adds an address to the list of allowed minters"
      },
      "getDeploymentCost(address)": {
        "notice": "Returns the number of required tokens, given an erc777 address"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Allows us to see what role is available to modify with the selected role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to use an index position to verify the account that has a role"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to know the total of members that has a role"
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow an admin to asign a new role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "This function allow us to know if an user has or not an specific role"
      },
      "removeToken(address)": {
        "notice": "Removes an address from the list of allowed minters"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow an user to quit an owned roleThe account that sends the petition needs to be the same that will renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow an admin to revoke a role to an account"
      },
      "withdrawTokens(address,uint256)": {
        "notice": "Transfers tokens from the factory to any of the OWNER addresses"
      }
    },
    "notice": "You can use this contract to manage the use of tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4573,
        "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)4552_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3640_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7394_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3639,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3325_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage)4552_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 4528,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)"
          },
          {
            "astId": 4530,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "failsafe",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4535,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)"
          },
          {
            "astId": 4538,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "creators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4543,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "creatorToContracts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
          },
          {
            "astId": 4547,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "contractToCreator",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)"
          },
          {
            "astId": 4551,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "deploymentCostForToken",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RoleData)7394_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 7391,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7393,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3320,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3324,
            "contract": "contracts/Factory/facets/TokensFacet.sol:TokensFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}