{
  "address": "0xe2a3210AAA0cB75F6c8CcCD132c48Ce9f73F572E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collectionIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "collectionName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectionLength",
          "type": "uint256"
        }
      ],
      "name": "CreatedCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_copies",
          "type": "uint256"
        }
      ],
      "name": "createProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingIndex",
          "type": "uint256"
        }
      ],
      "name": "getNextSequentialIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProductCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex_",
          "type": "uint256"
        }
      ],
      "name": "getProductInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startingToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endingToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mintableTokens",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256[]",
              "name": "rangeList",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingToken",
          "type": "uint256"
        }
      ],
      "name": "hasTokenInProduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "mintedTokensInProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "find",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        }
      ],
      "name": "ownsTokenInProduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "find",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "name": "ownsTokenInRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "productToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productIndex_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "tokenByProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "tokenToProduct",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "productIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenIndex_",
          "type": "uint256"
        }
      ],
      "name": "tokenToProductIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x532126a1a8e79dbc412d005e7d78198ef31d35dd6a8c764080d059e20c696518",
  "receipt": {
    "to": null,
    "from": "0xEC30759D0A3F3CE0A730920DC29d74e441f492C3",
    "contractAddress": "0xe2a3210AAA0cB75F6c8CcCD132c48Ce9f73F572E",
    "transactionIndex": 2,
    "gasUsed": "1533571",
    "logsBloom": "0x
    "blockHash": "0xaff7d51e49e710bb845d3194c6e1931b9b67215b25e51d54699bebc743d35437",
    "transactionHash": "0x532126a1a8e79dbc412d005e7d78198ef31d35dd6a8c764080d059e20c696518",
    "logs": [],
    "blockNumber": 4623895,
    "cumulativeGasUsed": "3514523",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "597020f27da0c3a6d99dcb42945d060e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collectionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectionLength\",\"type\":\"uint256\"}],\"name\":\"CreatedCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_copies\",\"type\":\"uint256\"}],\"name\":\"createProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingIndex\",\"type\":\"uint256\"}],\"name\":\"getNextSequentialIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProductCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex_\",\"type\":\"uint256\"}],\"name\":\"getProductInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintableTokens\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"rangeList\",\"type\":\"uint256[]\"}],\"internalType\":\"struct product\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingToken\",\"type\":\"uint256\"}],\"name\":\"hasTokenInProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"mintedTokensInProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"find\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"}],\"name\":\"ownsTokenInProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"find\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"name\":\"ownsTokenInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"productToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"tokenByProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"tokenToProduct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"productIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex_\",\"type\":\"uint256\"}],\"name\":\"tokenToProductIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Juan M. Sanchez M.\",\"details\":\"Notice that this contract is inheriting from AccessControlAppStorageEnumerable721\",\"events\":{\"CreatedCollection(uint256,string,uint256,uint256)\":{\"params\":{\"collectionIndex\":\"Contains the unique id that will be indexed for the collection\",\"collectionLength\":\"Contains the total of tokens that we want the product to have\",\"collectionName\":\"Contains the name to identify the collection\",\"startingToken\":\"Contains the selected NTF token to start the product \"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"params\":{\"newAdminRole\":\"contains the new status of the role\",\"previousAdminRole\":\"contains the previous status of the role\",\"role\":\"Contains the role we want to update\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to grant the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"contains the address that we want to revoke the role\",\"role\":\"Contains the role we want to update\",\"sender\":\"contains the address that is changing the role of the account\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"owner\":\"Contains the address which balance we want to verify\"},\"returns\":{\"_0\":\"uint256 with the current balance of the account\"}},\"createProduct(string,uint256)\":{\"details\":\"This function is only available to an account with a `CREATOR` role\",\"params\":{\"_copies\":\"Amount of tokens inside the product\",\"_productName\":\"Name of the product to create\"}},\"getNextSequentialIndex(uint256,uint256,uint256)\":{\"details\":\"Uses a loop, do not call this from a non-view function!This functions require that the collection exist to properly work \",\"params\":{\"collectionId\":\"Index of the collection that we want to loop\",\"endingIndex\":\"Index of the last token of the product \",\"startingIndex\":\"Index of the starting token of the product\"},\"returns\":{\"nextIndex\":\"\\tWith the next starting point available for new products\"}},\"getProductCount()\":{\"details\":\"Use with get product to list all of the products\",\"returns\":{\"_0\":\"uint With the total of products\"}},\"getProductInfo(uint256)\":{\"details\":\"This function require that the collection exist\",\"params\":{\"productIndex_\":\"Contains the id of the product that we want to verify\"},\"returns\":{\"_0\":\"product which contain the information of the product\"}},\"getRoleAdmin(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bytes that indicates if an account has or not an admin role\"}},\"getRoleMember(bytes32,uint256)\":{\"params\":{\"index\":\"Contains the indexed position to verify inside the role members list\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"address that indicates the address indexed in that position\"}},\"getRoleMemberCount(bytes32)\":{\"params\":{\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"uint256 that indicates the total accounts with that role\"}},\"grantRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to grant\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"Contains the account address thay we want to verify\",\"role\":\"Contains the role that we want to verify\"},\"returns\":{\"_0\":\"bool that indicates if an account has or not a role\"}},\"hasTokenInProduct(address,uint256,uint256,uint256)\":{\"details\":\"Loops are expensive in solidity, so don't use this in a function that requires gas\",\"params\":{\"endingToken\":\"Last token to search \",\"productIndex\":\"Index of the collection to search\",\"startingToken\":\"Starting token to search\",\"userAddress\":\"Address that will be uses to see the belonging tokens of a product and a range\"},\"returns\":{\"_0\":\"bool \\t\\t\\t\\tWhich respond if the tokens belongs or not to a product and a range\"}},\"mintedTokensInProduct(uint256)\":{\"params\":{\"productIndex\":\"Product index to verify\"},\"returns\":{\"length\":\" \\t \\tNumber of tokens already minted\"}},\"ownsTokenInProduct(address,uint256)\":{\"details\":\"This function require that the product exist\",\"params\":{\"find\":\"Address to search\",\"productIndex\":\"Collection to verify\"},\"returns\":{\"_0\":\"bool \\t\\t\\tFor the existence or not, of the token in the product \"}},\"ownsTokenInRange(address,uint256)\":{\"details\":\"This function require that the range exist \",\"params\":{\"find\":\"Address to search\",\"rangeIndex\":\"Range to verify\"},\"returns\":{\"_0\":\"bool \\t\\tFor the existence or not, of the token in the range \"}},\"productToToken(uint256,uint256)\":{\"details\":\"This function require that the collection exist\\\\\",\"params\":{\"productIndex_\":\"Contains the index of the collection where is the token\",\"tokenIndex_\":\"Contains the index of the token inside the collection\"},\"returns\":{\"_0\":\"uint\\t\\t  With the value of the token in that indexed position \"}},\"renounceRole(bytes32,address)\":{\"details\":\"Currently you can only renounce to your own roles\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role to remove from our account\"}},\"revokeRole(bytes32,address)\":{\"details\":\"This function is only available to an account with an Admin role\",\"params\":{\"account\":\"Contains the account that has the role we want to update\",\"role\":\"Contains the role that we want to revoke\"}},\"tokenByProduct(uint256,uint256)\":{\"details\":\"This function require that the collection exist\",\"params\":{\"productIndex_\":\"Contains the index of the collection where is the token\",\"tokenIndex_\":\"Contains the index of the token inside the collection\"},\"returns\":{\"_0\":\"uint\\t\\t  With the value of the token in that indexed position \"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"params\":{\"index\":\"Contains the position in the owned tokens list\",\"owner\":\"Contains address of the acount that we want to verify\"},\"returns\":{\"_0\":\"uint with the token that is owned by the account in that position \"}},\"tokenToProduct(uint256)\":{\"details\":\"This function require that the token exist\",\"params\":{\"tokenIndex_\":\"Contains the index of the token which info we want to know \"},\"returns\":{\"productIndex\":\" With the corresponding collection ID for the token\",\"rangeIndex\":\"  With the corresponding range of the collection \"}},\"tokenToProductIndex(uint256)\":{\"details\":\"This function require that the token exist\",\"params\":{\"tokenIndex_\":\"Contains the index of the token inside the collection\"},\"returns\":{\"_0\":\"uint \\t\\t Return the ID of the collection \"}}},\"title\":\"RAIR Product facet contract\",\"version\":1},\"userdoc\":{\"events\":{\"CreatedCollection(uint256,string,uint256,uint256)\":{\"notice\":\"This event stores in the blockchain when a collection is correctly created\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"notice\":\"This event stores in the blockchain when we change an admin role\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we grant a role\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"This event stores in the blockchain when we revoke a role\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"this funtions allow us to know the balance of an account\"},\"createProduct(string,uint256)\":{\"notice\":\"Creates a new product\"},\"getNextSequentialIndex(uint256,uint256,uint256)\":{\"notice\":\"Loops through a range of tokens inside a collection and returns the first token without an owner\"},\"getProductCount()\":{\"notice\":\"Returns the number of products on the contract\"},\"getProductInfo(uint256)\":{\"notice\":\"This function allow us to check the information of a product\"},\"getRoleAdmin(bytes32)\":{\"notice\":\"Allow us to check the admin role that contains a role\"},\"getRoleMember(bytes32,uint256)\":{\"notice\":\"Allow us to check the address of an indexed position for the role list\"},\"getRoleMemberCount(bytes32)\":{\"notice\":\"Allow us to check total members that has an selected role\"},\"grantRole(bytes32,address)\":{\"notice\":\"Allow us to grant a role to an account\"},\"hasRole(bytes32,address)\":{\"notice\":\"Allow us to check the if and account has a selected role\"},\"hasTokenInProduct(address,uint256,uint256,uint256)\":{\"notice\":\"Loops over the user's tokens looking for one that belongs to a product and a specific range\"},\"mintedTokensInProduct(uint256)\":{\"notice\":\"Returns the number of tokens inside a product\"},\"ownsTokenInProduct(address,uint256)\":{\"notice\":\"Wrapper for the validator, searching for the entire product\"},\"ownsTokenInRange(address,uint256)\":{\"notice\":\"Wrapper for the validator, searching for the entire range\"},\"productToToken(uint256,uint256)\":{\"notice\":\"This function will search in a collection for a especific token and return its value\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Allow us to renounce to a role\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Allow us to revoke a role to an account\"},\"tokenByProduct(uint256,uint256)\":{\"notice\":\"This function allow us to see the position of creation of a token\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"This functions allow us to check is a token is owned by an account\"},\"tokenToProduct(uint256)\":{\"notice\":\"This function allow us to locaste the collection & range of a token \"},\"tokenToProductIndex(uint256)\":{\"notice\":\"This function allow us to know the index of the collection that contains the token\"}},\"notice\":\"You can use this contract to manage information about the token and the products  \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/RAIR Token Facets/ProductFacet.sol\":\"RAIRProductFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/common/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct RoleData {\\n\\tmapping(address => bool) members;\\n\\tbytes32 adminRole;\\n}\\n \\n/// @title  A contract that administrate roles & access\\n/// @notice You can use this contract to modify and define the role of an user\\nabstract contract AccessControlEnumerable is Context {\\t\\n    /// @notice This event stores in the blockchain when an admin role changes\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  previousAdminRole Contains the previous admin role\\n    /// @param  newAdminRole Contains the new admin role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when a role is granted\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    /// @notice This event stores in the blockchain when a role is revoked\\n    /// @param  role Contains the admin role that we want to use \\n    /// @param  account Contains the account we want to add to a new role\\n    /// @param  sender Contains the sender of the role petition\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /// @notice Allow an user to quit an owned role\\n    /// @notice The account that sends the petition needs to be the same that will renounce to a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use.    \\n    function renounceRole(bytes32 role, address account) public {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to asign a new role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice Allow an admin to revoke a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify \\n    /// @param  account Contains the account address to check. \\n    /// @return role in boolean, if the account has the selected role\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool);\\n\\n\\t/// @notice Allow us to verify the branch of roles asociated to an father role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return bytes32 with the child role\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32);\\n\\n    /// @notice Check if the account with the index has the desired role\\n    /// @param  role Contains the role that we want to use \\n    /// @param  index Contains the index asociated to an account\\n    /// @return address of the account with the index position in the list of the desired role\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view virtual returns (address);\\n\\n    /// @notice Allow to verify if the account has a role\\n    /// @param  role Contains the role that we want to verify\\n    /// @return uint256 wuth he total of members with the desired role \\n\\tfunction getRoleMemberCount(bytes32 role) public view virtual returns (uint256);\\n\\n    /// @param role Contains the role that we want to use \\n    /// @param adminRole Contains the new admin role to use\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual;\\n\\n    /// @notice Grants a role to an account\\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _grantRole(bytes32 role, address account) internal virtual;\\n\\n    /// @notice Revokes a role to an account \\n    /// @param  role Contains the role that we want to use \\n    /// @param  account Contains the account address to use. \\n\\tfunction _revokeRole(bytes32 role, address account) internal virtual;\\n}\",\"keccak256\":\"0xdaebcf9440203930cebc6e8decfbddac015b0fda8ebd26b18d6bb8d6af0ffeee\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/AppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19; \\n\\nimport '../../common/AccessControl.sol';\\n\\nstruct range {\\n\\tuint rangeStart;\\n\\tuint rangeEnd;\\n\\tuint tokensAllowed;\\n\\tuint mintableTokens;\\n\\tuint lockedTokens;\\n\\tuint rangePrice;\\n\\tstring rangeName;\\n}\\n\\nstruct product {\\n\\tuint startingToken;\\n\\tuint endingToken;\\n\\tuint mintableTokens;\\n\\tstring name;\\n\\tuint[] rangeList;\\n}\\n\\nstruct AppStorage721 {\\n\\t// ERC721\\n\\tstring _name;\\n\\tstring _symbol;\\n\\tmapping(uint256 => address) _owners;\\n\\tmapping(address => uint256) _balances;\\n\\tmapping(uint256 => address) _tokenApprovals;\\n\\tmapping(address => mapping(address => bool)) _operatorApprovals;\\n\\t// ERC721 Enumerable\\n\\tmapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\tmapping(uint256 => uint256) _ownedTokensIndex;\\n\\tuint256[] _allTokens;\\n\\tmapping(uint256 => uint256) _allTokensIndex;\\n\\t// Access Control Enumerable\\n\\tmapping(bytes32 => RoleData) _roles;\\n\\tmapping(bytes32 => EnumerableSet.AddressSet) _roleMembers;\\n\\t// App\\n\\tstring baseURI;\\n\\taddress factoryAddress;\\n\\tuint16 royaltyFee;\\n\\tproduct[] products;\\n\\trange[] ranges;\\n\\tmapping(uint => uint) tokenToProduct;\\n\\tmapping(uint => uint) tokenToRange;\\n\\tmapping(uint => string) uniqueTokenURI;\\n\\tmapping(uint => string) productURI;\\n\\tmapping(uint => bool) appendTokenIndexToProductURI;\\n\\tbool appendTokenIndexToBaseURI;\\n\\tmapping(uint => uint[]) tokensByProduct;\\n\\tstring contractMetadataURI;\\n\\tmapping(uint => uint) rangeToProduct;\\n\\tmapping(uint => bool) _minted;\\n\\t// August 2022 - Metadata File Extension Update\\n\\tmapping(uint => string) rangeURI;\\n\\tmapping(uint => bool) appendTokenIndexToRangeURI;\\n\\tstring _metadataExtension;\\n\\t// Always add new variables at the end of the struct\\n}\\n\\nlibrary LibAppStorage721 {\\n\\t/// @notice this funtion set the storage of the diamonds 721 contracts \\n\\tfunction diamondStorage() internal pure\\treturns (AppStorage721 storage ds) {\\n\\t\\tassembly {\\n\\t\\t\\tds.slot := 0\\n\\t\\t}\\n\\t}\\n}\\n\\n/// @title  This is contract to manage the access control of the RAIR token facet\\n/// @notice You can use this contract to administrate roles of the app market\\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from Context\\ncontract AccessControlAppStorageEnumerable721 is Context {\\n\\tAppStorage721 internal s;\\n\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\t/// @notice This event stores in the blockchain when we change an admin role\\n    /// @param  role Contains the role we want to update\\n    /// @param  previousAdminRole contains the previous status of the role\\n\\t/// @param  newAdminRole contains the new status of the role\\n\\tevent RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\t/// @notice This event stores in the blockchain when we grant a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to grant the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\t/// @notice This event stores in the blockchain when we revoke a role\\n    /// @param  role Contains the role we want to update\\n    /// @param  account contains the address that we want to revoke the role\\n\\t/// @param  sender contains the address that is changing the role of the account\\n\\tevent RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n\\tmodifier onlyRole(bytes32 role) {\\n\\t\\t_checkRole(role, _msgSender());\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allow us to renounce to a role\\n\\t/// @dev \\tCurrently you can only renounce to your own roles\\n\\t/// @param \\trole Contains the role to remove from our account\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction renounceRole(bytes32 role, address account) public {\\n\\t\\trequire(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to grant a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to grant\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction grantRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_grantRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @dev \\tThis function is only available to an account with an Admin role\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction revokeRole(bytes32 role, address account) public onlyRole(getRoleAdmin(role)) {\\n\\t\\t_revokeRole(role, account);\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\tfunction _checkRole(bytes32 role, address account) internal view {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\trevert(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t\\\"AccessControl: account \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint160(account), 20),\\n\\t\\t\\t\\t\\t\\t\\\" is missing role \\\",\\n\\t\\t\\t\\t\\t\\tStrings.toHexString(uint256(role), 32)\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to check the if and account has a selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\taccount Contains the account address thay we want to verify\\n\\t/// @return bool that indicates if an account has or not a role\\n\\tfunction hasRole(bytes32 role, address account) public view returns (bool) {\\n\\t\\treturn s._roles[role].members[account];\\n\\t}\\n\\n\\t/// @notice Allow us to check the admin role that contains a role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return bytes that indicates if an account has or not an admin role\\n\\tfunction getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n\\t\\treturn s._roles[role].adminRole;\\n\\t}\\n\\n\\t/// @notice Allow us to check the address of an indexed position for the role list\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @param \\tindex Contains the indexed position to verify inside the role members list\\n\\t/// @return address that indicates the address indexed in that position\\n\\tfunction getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n\\t\\treturn s._roleMembers[role].at(index);\\n\\t}\\n\\n\\t/// @notice Allow us to check total members that has an selected role\\n\\t/// @param \\trole Contains the role that we want to verify\\n\\t/// @return uint256 that indicates the total accounts with that role\\n\\tfunction getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n\\t\\treturn s._roleMembers[role].length();\\n\\t}\\n\\n\\t/// @notice Allow us to modify a rol and set it as an admin role\\n\\t/// @param \\trole Contains the role that we want to modify\\n\\t/// @param \\tadminRole Contains the admin role that we want to set\\n\\tfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n\\t\\tbytes32 previousAdminRole = getRoleAdmin(role);\\n\\t\\ts._roles[role].adminRole = adminRole;\\n\\t\\temit RoleAdminChanged(role, previousAdminRole, adminRole);\\n\\t}\\n\\n\\t/// @notice Allow us to revoke a role to an account\\n\\t/// @param \\trole Contains the role that we want to revoke\\n\\t/// @param \\taccount Contains the account that has the role we want to update\\n\\tfunction _revokeRole(bytes32 role, address account) internal {\\n\\t\\tif (hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = false;\\n\\t\\t\\temit RoleRevoked(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].remove(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Allow us to grant a new role to an account\\n\\t/// @dev \\tNotice that this function override the behavior of\\n\\t/// @dev \\tthe _grantRole function inherited from AccessControlEnumerable\\n\\t/// @param \\trole Contains the facet addresses and function selectors\\n    /// @param \\taccount Contains the facet addresses and function selectors\\n\\tfunction _grantRole(bytes32 role, address account) internal {\\n\\t\\tif (!hasRole(role, account)) {\\n\\t\\t\\ts._roles[role].members[account] = true;\\n\\t\\t\\temit RoleGranted(role, account, _msgSender());\\n\\t\\t\\ts._roleMembers[role].add(account);\\n\\t\\t}\\n\\t}\\n}\",\"keccak256\":\"0x8d36cbe7a75ffb8f011626f88c6287cb99b291b7b9b15cec90d9b283a25c736c\",\"license\":\"GPL-3.0\"},\"contracts/tokens/RAIR Token Facets/ProductFacet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport './AppStorage.sol';\\n\\n/// @title  RAIR Product facet contract\\n/// @notice You can use this contract to manage information about the token and the products  \\n/// @author Juan M. Sanchez M.\\n/// @dev \\tNotice that this contract is inheriting from AccessControlAppStorageEnumerable721\\ncontract RAIRProductFacet is AccessControlAppStorageEnumerable721 {\\n\\tbytes32 public constant CREATOR = keccak256(\\\"CREATOR\\\");\\n\\n\\t/// @notice This event stores in the blockchain when a collection is correctly created\\n    /// @param  collectionIndex Contains the unique id that will be indexed for the collection\\n\\t/// @param  collectionName Contains the name to identify the collection\\n\\t/// @param  startingToken Contains the selected NTF token to start the product \\n\\t/// @param  collectionLength Contains the total of tokens that we want the product to have\\n\\tevent CreatedCollection(uint indexed collectionIndex, string collectionName, uint startingToken, uint collectionLength);\\n\\n\\t/// @notice Verifies that the product exists\\n\\t/// @param\\tcollectionId\\tCollection to verify\\n\\tmodifier collectionExists(uint collectionId) {\\n\\t\\trequire(s.products.length > collectionId, \\\"RAIR ERC721: Collection does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Verifies that the range exists\\n\\t/// @param\\trangeID\\tRange to verify\\n\\tmodifier rangeExists(uint rangeID) {\\n\\t\\trequire(s.ranges.length > rangeID, \\\"RAIR ERC721: Range does not exist\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Verifies that the token exists\\n\\t/// @param\\ttokenIndex\\tRange to verify\\n\\tmodifier tokenExists(uint tokenIndex) {\\n\\t\\trequire(s._minted[tokenIndex], \\\"RAIR ERC721: Query for nonexistent token\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Wrapper for the validator, searching for the entire product\\n\\t/// @dev \\tThis function require that the product exist\\n\\t/// @param\\tfind\\t\\t\\tAddress to search\\n\\t/// @param\\tproductIndex\\tCollection to verify\\n\\t/// @return bool \\t\\t\\tFor the existence or not, of the token in the product \\n\\tfunction ownsTokenInProduct(address find, uint productIndex) public view collectionExists(productIndex) returns (bool) {\\n\\t\\tproduct storage selectedProduct = s.products[productIndex];\\n\\t\\treturn _ownsTokenInsideRange(find, selectedProduct.startingToken, selectedProduct.endingToken);\\n\\t}\\n\\n\\t/// @notice Wrapper for the validator, searching for the entire range\\n\\t/// @dev \\tThis function require that the range exist \\n\\t/// @param\\tfind\\t\\tAddress to search\\n\\t/// @param\\trangeIndex\\tRange to verify\\n\\t/// @return bool \\t\\tFor the existence or not, of the token in the range \\n\\tfunction ownsTokenInRange(address find, uint rangeIndex) public view rangeExists(rangeIndex) returns (bool) {\\n\\t\\trange storage selectedRange = s.ranges[rangeIndex];\\n\\t\\tuint startOfProduct = s.products[s.rangeToProduct[rangeIndex]].startingToken;\\n\\t\\treturn _ownsTokenInsideRange(find, startOfProduct + selectedRange.rangeStart, startOfProduct + selectedRange.rangeEnd);\\n\\t}\\n\\n\\t/// @notice Validates that an address owns at least one token inside a specified range\\n\\t/// @dev Loops through the range, don't use on non-view functions\\n\\t/// @param\\tfind\\tAddress to validate\\n\\t/// @param\\tfrom\\tRange start\\n\\t/// @param\\tto\\t\\tRange end\\n\\t/// @return bool \\tFor the existence or not, of the token inside the range \\n\\tfunction _ownsTokenInsideRange(address find, uint from, uint to) internal view returns (bool) {\\n\\t\\tfor (uint i = from; i < to; i++) {\\n\\t\\t\\tif (s._owners[i] == find) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/// @notice This function allow us to see the position of creation of a token\\n\\t/// @dev \\tThis function require that the collection exist\\n\\t/// @param \\tproductIndex_ Contains the index of the collection where is the token\\n\\t/// @param \\ttokenIndex_   Contains the index of the token inside the collection\\n\\t/// @return uint\\t\\t  With the value of the token in that indexed position \\n\\tfunction tokenByProduct(uint productIndex_, uint tokenIndex_) public view collectionExists(productIndex_) returns (uint) {\\n\\t\\treturn s.tokensByProduct[productIndex_][tokenIndex_];\\n\\t}\\n\\n\\t/// @notice This function will search in a collection for a especific token and return its value\\n\\t/// @dev \\tThis function require that the collection exist\\\\\\n\\t/// @param \\tproductIndex_ Contains the index of the collection where is the token\\n\\t/// @param \\ttokenIndex_   Contains the index of the token inside the collection\\n\\t/// @return uint\\t\\t  With the value of the token in that indexed position \\n\\tfunction productToToken(uint productIndex_, uint tokenIndex_) public view collectionExists(productIndex_) returns(uint) {\\n\\t\\treturn s.products[productIndex_].startingToken + tokenIndex_;\\n\\t}\\n\\n\\t/// @notice This function allow us to know the index of the collection that contains the token\\n\\t/// @dev \\tThis function require that the token exist\\n\\t/// @param  tokenIndex_  Contains the index of the token inside the collection\\n\\t/// @return uint \\t\\t Return the ID of the collection \\n\\tfunction tokenToProductIndex(uint tokenIndex_) public view tokenExists(tokenIndex_) returns (uint) {\\n\\t\\treturn tokenIndex_ - s.products[s.tokenToProduct[tokenIndex_]].startingToken;\\n\\t}\\n\\n\\t/// @notice This function allow us to locaste the collection & range of a token \\n\\t/// @dev \\tThis function require that the token exist\\n\\t/// @param \\ttokenIndex_   Contains the index of the token which info we want to know \\n\\t/// @return productIndex  With the corresponding collection ID for the token\\n\\t/// @return rangeIndex\\t  With the corresponding range of the collection \\n\\tfunction tokenToProduct(uint tokenIndex_) public view tokenExists(tokenIndex_) returns (uint productIndex, uint rangeIndex) {\\n\\t\\tproductIndex = s.tokenToProduct[tokenIndex_];\\n\\t\\trangeIndex = s.tokenToRange[tokenIndex_];\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of products on the contract\\n\\t/// @dev\\tUse with get product to list all of the products\\n\\t/// @return uint With the total of products\\n\\tfunction getProductCount() external view returns(uint) {\\n\\t\\treturn s.products.length;\\n\\t}\\n\\n\\t/// @notice This function allow us to check the information of a product\\n\\t/// @dev \\tThis function require that the collection exist\\n\\t/// @param productIndex_ Contains the id of the product that we want to verify\\n\\t/// @return product which contain the information of the product\\n\\tfunction getProductInfo(uint productIndex_) external view collectionExists(productIndex_) returns (product memory) {\\n\\t\\treturn s.products[productIndex_];\\n\\t}\\n\\n\\t/// @notice This functions allow us to check is a token is owned by an account\\n\\t/// @param owner Contains address of the acount that we want to verify\\n\\t/// @param index Contains the position in the owned tokens list\\n\\t/// @return uint with the token that is owned by the account in that position \\n\\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\n\\t\\trequire(index < RAIRProductFacet.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n\\t\\treturn s._ownedTokens[owner][index];\\n\\t}\\n\\n\\t/// @notice this funtions allow us to know the balance of an account\\n\\t/// @param owner Contains the address which balance we want to verify\\n\\t/// @return uint256 with the current balance of the account\\n\\tfunction balanceOf(address owner) public view returns (uint256) {\\n\\t\\trequire(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\t\\treturn s._balances[owner];\\n\\t}\\n\\n\\t/// @notice This function allow us to verify if a token exist or not \\n\\t/// @param tokenId Contains the token Id that we want to check\\n\\t/// @return bool to indicate if the token exist or not\\n\\tfunction _exists(uint256 tokenId) internal view returns (bool) {\\n        return s._owners[tokenId] != address(0);\\n    }\\n\\t\\n\\t/// @notice\\tLoops through a range of tokens inside a collection and returns the first token without an owner\\n\\t/// @dev\\tUses a loop, do not call this from a non-view function!\\n\\t/// @dev \\tThis functions require that the collection exist to properly work \\n\\t/// @param\\tcollectionId\\tIndex of the collection that we want to loop\\n\\t/// @param\\tstartingIndex\\tIndex of the starting token of the product\\n\\t/// @param\\tendingIndex\\t\\tIndex of the last token of the product \\n\\t/// @return nextIndex\\t\\tWith the next starting point available for new products\\n\\tfunction getNextSequentialIndex(uint collectionId, uint startingIndex, uint endingIndex) public view collectionExists(collectionId) returns(uint nextIndex) {\\n\\t\\tproduct memory currentProduct = s.products[collectionId];\\n\\t\\tfor (uint i = currentProduct.startingToken + startingIndex; i <= currentProduct.startingToken + endingIndex; i++) {\\n\\t\\t\\tif (!_exists(i)) {\\n\\t\\t\\t\\treturn i - currentProduct.startingToken;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(false, \\\"RAIR ERC721: There are no available tokens in this range.\\\");\\n\\t}\\n\\n\\t/// @notice\\tLoops over the user's tokens looking for one that belongs to a product and a specific range\\n\\t/// @dev\\tLoops are expensive in solidity, so don't use this in a function that requires gas\\n\\t/// @param\\tuserAddress\\t\\t\\tAddress that will be uses to see the belonging tokens of a product and a range\\n\\t/// @param\\tproductIndex\\t\\tIndex of the collection to search\\n\\t/// @param\\tstartingToken\\t\\tStarting token to search\\n\\t/// @param\\tendingToken\\t\\t\\tLast token to search \\n\\t/// @return bool \\t\\t\\t\\tWhich respond if the tokens belongs or not to a product and a range\\n\\tfunction hasTokenInProduct(\\n\\t\\t\\t\\taddress userAddress,\\n\\t\\t\\t\\tuint productIndex,\\n\\t\\t\\t\\tuint startingToken,\\n\\t\\t\\t\\tuint endingToken) public view returns (bool) {\\n\\t\\tproduct memory aux = s.products[productIndex];\\n\\t\\tif (aux.endingToken != 0) {\\n\\t\\t\\tfor (uint i = 0; i < balanceOf(userAddress); i++) {\\n\\t\\t\\t\\tuint token = tokenOfOwnerByIndex(userAddress, i);\\n\\t\\t\\t\\tif (s.tokenToProduct[token] == productIndex &&\\n\\t\\t\\t\\t\\t\\ttoken >= aux.startingToken + startingToken &&\\n\\t\\t\\t\\t\\t\\ttoken <= aux.startingToken + endingToken) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/// @notice\\tReturns the number of tokens inside a product\\n\\t/// @param\\tproductIndex \\tProduct index to verify\\n\\t/// @return length  \\t \\tNumber of tokens already minted\\n\\tfunction mintedTokensInProduct(uint productIndex) public view returns (uint length) {\\n\\t\\tlength = s.tokensByProduct[productIndex].length;\\n\\t}\\n\\t\\n\\t/// @notice\\tCreates a new product\\n\\t/// @dev \\tThis function is only available to an account with a `CREATOR` role\\n\\t/// @param\\t_productName \\tName of the product to create\\n\\t/// @param\\t_copies\\t\\t\\tAmount of tokens inside the product\\n\\tfunction createProduct(string memory _productName, uint _copies) public onlyRole(CREATOR) {\\n\\t\\tuint lastToken = s.products.length == 0 ? 0 : s.products[s.products.length - 1].endingToken + 1;\\n\\t\\t\\n\\t\\tproduct storage newProduct = s.products.push();\\n\\n\\t\\tnewProduct.startingToken = lastToken;\\n\\t\\tnewProduct.endingToken = newProduct.startingToken + _copies - 1;\\n\\t\\tnewProduct.name = string(_productName);\\n\\t\\tnewProduct.mintableTokens = _copies;\\n\\t\\t\\n\\t\\temit CreatedCollection(s.products.length - 1, _productName, lastToken, _copies);\\n\\t}\\n}\",\"keccak256\":\"0x4f529b1eb88fc1839e1843f690e120ec72ec007548ad67abc5f02cc406763e92\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ac7806100206000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806391d14854116100b8578063ca15c8731161007c578063ca15c873146102d3578063d547741f146102e6578063d76bf566146102f9578063e4fbb60914610321578063e5b8501514610348578063e9300c6c1461035b57600080fd5b806391d14854146102745780639716d10114610287578063971b4cc41461029a578063bda5ec33146102ad578063c00b83c5146102c057600080fd5b80634a348da91161010a5780634a348da9146101db578063586704ea146101e35780636c99dcbf1461020357806370a082311461021657806379a85e6c146102295780639010d07c1461024957600080fd5b8063248a9ca3146101475780632f2ff15d1461017d5780632f745c591461019257806336568abe146101a557806336706b41146101b8575b600080fd5b61016a610155366004611497565b6000908152600a602052604090206001015490565b6040519081526020015b60405180910390f35b61019061018b3660046114cc565b61036e565b005b61016a6101a03660046114f8565b610399565b6101906101b33660046114cc565b610437565b6101cb6101c63660046114f8565b6104b5565b6040519015158152602001610174565b600e5461016a565b61016a6101f1366004611497565b60009081526016602052604090205490565b6101cb610211366004611522565b61051e565b61016a61022436600461155b565b6106fd565b61023c610237366004611497565b610784565b60405161017491906115c6565b61025c61025736600461164c565b610917565b6040516001600160a01b039091168152602001610174565b6101cb6102823660046114cc565b610936565b61016a61029536600461164c565b610961565b61016a6102a836600461164c565b6109ba565b61016a6102bb36600461166e565b610a14565b61016a6102ce366004611497565b610c56565b61016a6102e1366004611497565b610cc7565b6101906102f43660046114cc565b610cde565b61030c610307366004611497565b610d04565b60408051928352602083019190915201610174565b61016a7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db681565b6101cb6103563660046114f8565b610d58565b6101906103693660046116b0565b610e4a565b6000828152600a602052604090206001015461038a8133610f82565b6103948383610fe6565b505050565b60006103a4836106fd565b821061040b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084015b60405180910390fd5b506001600160a01b03821660009081526006602090815260408083208484529091529020545b92915050565b6001600160a01b03811633146104a75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610402565b6104b18282611080565b5050565b600e54600090829081106104db5760405162461bcd60e51b815260040161040290611765565b600080600e0184815481106104f2576104f26117ab565b9060005260206000209060050201905061051585826000015483600101546110fb565b95945050505050565b6000806000600e018581548110610537576105376117ab565b90600052602060002090600502016040518060a001604052908160008201548152602001600182015481526020016002820154815260200160038201805461057e906117c1565b80601f01602080910402602001604051908101604052809291908181526020018280546105aa906117c1565b80156105f75780601f106105cc576101008083540402835291602001916105f7565b820191906000526020600020905b8154815290600101906020018083116105da57829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561064f57602002820191906000526020600020905b81548152602001906001019080831161063b575b505050505081525050905080602001516000146106ef5760005b610672876106fd565b8110156106ed5760006106858883610399565b600081815260106020526040902054909150871480156106b1575082516106ad90879061180b565b8110155b80156106c9575082516106c590869061180b565b8111155b156106da57600193505050506106f5565b50806106e58161181e565b915050610669565b505b60009150505b949350505050565b60006001600160a01b0382166107685760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610402565b506001600160a01b031660009081526003602052604090205490565b6107b66040518060a0016040528060008152602001600081526020016000815260200160608152602001606081525090565b600e54829081106107d95760405162461bcd60e51b815260040161040290611765565b600e8054849081106107ed576107ed6117ab565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610834906117c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610860906117c1565b80156108ad5780601f10610882576101008083540402835291602001916108ad565b820191906000526020600020905b81548152906001019060200180831161089057829003601f168201915b505050505081526020016004820180548060200260200160405190810160405280929190818152602001828054801561090557602002820191906000526020600020905b8154815260200190600101908083116108f1575b50505050508152505091505b50919050565b6000828152600b6020526040812061092f908361114f565b9392505050565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600e54600090839081106109875760405162461bcd60e51b815260040161040290611765565b826000600e01858154811061099e5761099e6117ab565b9060005260206000209060050201600001546106f5919061180b565b600e54600090839081106109e05760405162461bcd60e51b815260040161040290611765565b6000848152601660205260409020805484908110610a0057610a006117ab565b906000526020600020015491505092915050565b600e5460009084908110610a3a5760405162461bcd60e51b815260040161040290611765565b600080600e018681548110610a5157610a516117ab565b90600052602060002090600502016040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610a98906117c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac4906117c1565b8015610b115780601f10610ae657610100808354040283529160200191610b11565b820191906000526020600020905b815481529060010190602001808311610af457829003601f168201915b5050505050815260200160048201805480602002602001604051908101604052809291908181526020018280548015610b6957602002820191906000526020600020905b815481526020019060010190808311610b55575b50505050508152505090506000858260000151610b86919061180b565b90505b8151610b9690869061180b565b8111610bdf576000818152600260205260409020546001600160a01b0316610bcd578151610bc49082611837565b93505050610c4e565b80610bd78161181e565b915050610b89565b5060405162461bcd60e51b815260206004820152603960248201527f52414952204552433732313a20546865726520617265206e6f20617661696c6160448201527f626c6520746f6b656e7320696e20746869732072616e67652e000000000000006064820152608401610402565b509392505050565b600081815260196020526040812054829060ff16610c865760405162461bcd60e51b81526004016104029061184a565b600083815260106020526040902054600e80549091908110610caa57610caa6117ab565b9060005260206000209060050201600001548361092f9190611837565b6000818152600b602052604081206104319061115b565b6000828152600a6020526040902060010154610cfa8133610f82565b6103948383611080565b6000818152601960205260408120548190839060ff16610d365760405162461bcd60e51b81526004016104029061184a565b5050506000908152601060209081526040808320546011909252909120549091565b600f5460009082908110610db85760405162461bcd60e51b815260206004820152602160248201527f52414952204552433732313a2052616e676520646f6573206e6f7420657869736044820152601d60fa1b6064820152608401610402565b600080600f018481548110610dcf57610dcf6117ab565b6000918252602080832087845260189091526040832054600e80546007909402909201945090918110610e0457610e046117ab565b9060005260206000209060050201600001549050610e4086836000015483610e2c919061180b565b6001850154610e3b908561180b565b6110fb565b9695505050505050565b7f3c2519c4487d47714872f92cf90a50c25f5deaec2789dc2a497b1272df611db6610e758133610f82565b600e5460009015610ec357600e8054610e9090600190611837565b81548110610ea057610ea06117ab565b9060005260206000209060050201600101546001610ebe919061180b565b610ec6565b60005b600e8054600181810183556000929092526005027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd01828155919250610f0c858461180b565b610f169190611837565b600182015560038101610f2986826118e0565b5060028101849055600e54610f4090600190611837565b7fe318895d3fd44cb3524ca783576b7737ae76b172e344357462ab4258b50c1c22868487604051610f73939291906119a0565b60405180910390a25050505050565b610f8c8282610936565b6104b157610fa4816001600160a01b03166014611165565b610faf836020611165565b604051602001610fc09291906119c5565b60408051601f198184030181529082905262461bcd60e51b825261040291600401611a3a565b610ff08282610936565b6104b1576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556110283390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46000828152600b602052604090206103949082611301565b61108a8282610936565b156104b1576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46000828152600b602052604090206103949082611316565b6000825b82811015611144576000818152600260205260409020546001600160a01b0380871691160361113257600191505061092f565b8061113c8161181e565b9150506110ff565b506000949350505050565b600061092f838361132b565b6000610431825490565b60606000611174836002611a4d565b61117f90600261180b565b67ffffffffffffffff8111156111975761119761169a565b6040519080825280601f01601f1916602001820160405280156111c1576020820181803683370190505b509050600360fc1b816000815181106111dc576111dc6117ab565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061120b5761120b6117ab565b60200101906001600160f81b031916908160001a905350600061122f846002611a4d565b61123a90600161180b565b90505b60018111156112b2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061126e5761126e6117ab565b1a60f81b828281518110611284576112846117ab565b60200101906001600160f81b031916908160001a90535060049490941c936112ab81611a64565b905061123d565b50831561092f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610402565b600061092f836001600160a01b038416611355565b600061092f836001600160a01b0384166113a4565b6000826000018281548110611342576113426117ab565b9060005260206000200154905092915050565b600081815260018301602052604081205461139c57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610431565b506000610431565b6000818152600183016020526040812054801561148d5760006113c8600183611837565b85549091506000906113dc90600190611837565b90508181146114415760008660000182815481106113fc576113fc6117ab565b906000526020600020015490508087600001848154811061141f5761141f6117ab565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061145257611452611a7b565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610431565b6000915050610431565b6000602082840312156114a957600080fd5b5035919050565b80356001600160a01b03811681146114c757600080fd5b919050565b600080604083850312156114df57600080fd5b823591506114ef602084016114b0565b90509250929050565b6000806040838503121561150b57600080fd5b611514836114b0565b946020939093013593505050565b6000806000806080858703121561153857600080fd5b611541856114b0565b966020860135965060408601359560600135945092505050565b60006020828403121561156d57600080fd5b61092f826114b0565b60005b83811015611591578181015183820152602001611579565b50506000910152565b600081518084526115b2816020860160208601611576565b601f01601f19169290920160200192915050565b6000602080835283518184015280840151604084015260408401516060840152606084015160a060808501526115ff60c085018261159a565b6080860151858203601f190160a0870152805180835290840192506000918401905b808310156116415783518252928401926001929092019190840190611621565b509695505050505050565b6000806040838503121561165f57600080fd5b50508035926020909101359150565b60008060006060848603121561168357600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156116c357600080fd5b823567ffffffffffffffff808211156116db57600080fd5b818501915085601f8301126116ef57600080fd5b8135818111156117015761170161169a565b604051601f8201601f19908116603f011681019083821181831017156117295761172961169a565b8160405282815288602084870101111561174257600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b60208082526026908201527f52414952204552433732313a20436f6c6c656374696f6e20646f6573206e6f7460408201526508195e1a5cdd60d21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806117d557607f821691505b60208210810361091157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610431576104316117f5565b600060018201611830576118306117f5565b5060010190565b81810381811115610431576104316117f5565b60208082526028908201527f52414952204552433732313a20517565727920666f72206e6f6e657869737465604082015267373a103a37b5b2b760c11b606082015260800190565b601f82111561039457600081815260208120601f850160051c810160208610156118b95750805b601f850160051c820191505b818110156118d8578281556001016118c5565b505050505050565b815167ffffffffffffffff8111156118fa576118fa61169a565b61190e8161190884546117c1565b84611892565b602080601f831160018114611943576000841561192b5750858301515b600019600386901b1c1916600185901b1785556118d8565b600085815260208120601f198616915b8281101561197257888601518255948401946001909101908401611953565b50858210156119905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6060815260006119b3606083018661159a565b60208301949094525060400152919050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516119fd816017850160208801611576565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611a2e816028840160208801611576565b01602801949350505050565b60208152600061092f602083018461159a565b8082028115828204841417610431576104316117f5565b600081611a7357611a736117f5565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ceb221635480a18d699939bce95ef2872dcf9b12a60aee44f4d20bb98986da1664736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Juan M. Sanchez M.",
    "details": "Notice that this contract is inheriting from AccessControlAppStorageEnumerable721",
    "events": {
      "CreatedCollection(uint256,string,uint256,uint256)": {
        "params": {
          "collectionIndex": "Contains the unique id that will be indexed for the collection",
          "collectionLength": "Contains the total of tokens that we want the product to have",
          "collectionName": "Contains the name to identify the collection",
          "startingToken": "Contains the selected NTF token to start the product "
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "params": {
          "newAdminRole": "contains the new status of the role",
          "previousAdminRole": "contains the previous status of the role",
          "role": "Contains the role we want to update"
        }
      },
      "RoleGranted(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to grant the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      },
      "RoleRevoked(bytes32,address,address)": {
        "params": {
          "account": "contains the address that we want to revoke the role",
          "role": "Contains the role we want to update",
          "sender": "contains the address that is changing the role of the account"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "owner": "Contains the address which balance we want to verify"
        },
        "returns": {
          "_0": "uint256 with the current balance of the account"
        }
      },
      "createProduct(string,uint256)": {
        "details": "This function is only available to an account with a `CREATOR` role",
        "params": {
          "_copies": "Amount of tokens inside the product",
          "_productName": "Name of the product to create"
        }
      },
      "getNextSequentialIndex(uint256,uint256,uint256)": {
        "details": "Uses a loop, do not call this from a non-view function!This functions require that the collection exist to properly work ",
        "params": {
          "collectionId": "Index of the collection that we want to loop",
          "endingIndex": "Index of the last token of the product ",
          "startingIndex": "Index of the starting token of the product"
        },
        "returns": {
          "nextIndex": "\tWith the next starting point available for new products"
        }
      },
      "getProductCount()": {
        "details": "Use with get product to list all of the products",
        "returns": {
          "_0": "uint With the total of products"
        }
      },
      "getProductInfo(uint256)": {
        "details": "This function require that the collection exist",
        "params": {
          "productIndex_": "Contains the id of the product that we want to verify"
        },
        "returns": {
          "_0": "product which contain the information of the product"
        }
      },
      "getRoleAdmin(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bytes that indicates if an account has or not an admin role"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "params": {
          "index": "Contains the indexed position to verify inside the role members list",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "address that indicates the address indexed in that position"
        }
      },
      "getRoleMemberCount(bytes32)": {
        "params": {
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "uint256 that indicates the total accounts with that role"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to grant"
        }
      },
      "hasRole(bytes32,address)": {
        "params": {
          "account": "Contains the account address thay we want to verify",
          "role": "Contains the role that we want to verify"
        },
        "returns": {
          "_0": "bool that indicates if an account has or not a role"
        }
      },
      "hasTokenInProduct(address,uint256,uint256,uint256)": {
        "details": "Loops are expensive in solidity, so don't use this in a function that requires gas",
        "params": {
          "endingToken": "Last token to search ",
          "productIndex": "Index of the collection to search",
          "startingToken": "Starting token to search",
          "userAddress": "Address that will be uses to see the belonging tokens of a product and a range"
        },
        "returns": {
          "_0": "bool \t\t\t\tWhich respond if the tokens belongs or not to a product and a range"
        }
      },
      "mintedTokensInProduct(uint256)": {
        "params": {
          "productIndex": "Product index to verify"
        },
        "returns": {
          "length": " \t \tNumber of tokens already minted"
        }
      },
      "ownsTokenInProduct(address,uint256)": {
        "details": "This function require that the product exist",
        "params": {
          "find": "Address to search",
          "productIndex": "Collection to verify"
        },
        "returns": {
          "_0": "bool \t\t\tFor the existence or not, of the token in the product "
        }
      },
      "ownsTokenInRange(address,uint256)": {
        "details": "This function require that the range exist ",
        "params": {
          "find": "Address to search",
          "rangeIndex": "Range to verify"
        },
        "returns": {
          "_0": "bool \t\tFor the existence or not, of the token in the range "
        }
      },
      "productToToken(uint256,uint256)": {
        "details": "This function require that the collection exist\\",
        "params": {
          "productIndex_": "Contains the index of the collection where is the token",
          "tokenIndex_": "Contains the index of the token inside the collection"
        },
        "returns": {
          "_0": "uint\t\t  With the value of the token in that indexed position "
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Currently you can only renounce to your own roles",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role to remove from our account"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "This function is only available to an account with an Admin role",
        "params": {
          "account": "Contains the account that has the role we want to update",
          "role": "Contains the role that we want to revoke"
        }
      },
      "tokenByProduct(uint256,uint256)": {
        "details": "This function require that the collection exist",
        "params": {
          "productIndex_": "Contains the index of the collection where is the token",
          "tokenIndex_": "Contains the index of the token inside the collection"
        },
        "returns": {
          "_0": "uint\t\t  With the value of the token in that indexed position "
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "params": {
          "index": "Contains the position in the owned tokens list",
          "owner": "Contains address of the acount that we want to verify"
        },
        "returns": {
          "_0": "uint with the token that is owned by the account in that position "
        }
      },
      "tokenToProduct(uint256)": {
        "details": "This function require that the token exist",
        "params": {
          "tokenIndex_": "Contains the index of the token which info we want to know "
        },
        "returns": {
          "productIndex": " With the corresponding collection ID for the token",
          "rangeIndex": "  With the corresponding range of the collection "
        }
      },
      "tokenToProductIndex(uint256)": {
        "details": "This function require that the token exist",
        "params": {
          "tokenIndex_": "Contains the index of the token inside the collection"
        },
        "returns": {
          "_0": "uint \t\t Return the ID of the collection "
        }
      }
    },
    "title": "RAIR Product facet contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreatedCollection(uint256,string,uint256,uint256)": {
        "notice": "This event stores in the blockchain when a collection is correctly created"
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "notice": "This event stores in the blockchain when we change an admin role"
      },
      "RoleGranted(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we grant a role"
      },
      "RoleRevoked(bytes32,address,address)": {
        "notice": "This event stores in the blockchain when we revoke a role"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "this funtions allow us to know the balance of an account"
      },
      "createProduct(string,uint256)": {
        "notice": "Creates a new product"
      },
      "getNextSequentialIndex(uint256,uint256,uint256)": {
        "notice": "Loops through a range of tokens inside a collection and returns the first token without an owner"
      },
      "getProductCount()": {
        "notice": "Returns the number of products on the contract"
      },
      "getProductInfo(uint256)": {
        "notice": "This function allow us to check the information of a product"
      },
      "getRoleAdmin(bytes32)": {
        "notice": "Allow us to check the admin role that contains a role"
      },
      "getRoleMember(bytes32,uint256)": {
        "notice": "Allow us to check the address of an indexed position for the role list"
      },
      "getRoleMemberCount(bytes32)": {
        "notice": "Allow us to check total members that has an selected role"
      },
      "grantRole(bytes32,address)": {
        "notice": "Allow us to grant a role to an account"
      },
      "hasRole(bytes32,address)": {
        "notice": "Allow us to check the if and account has a selected role"
      },
      "hasTokenInProduct(address,uint256,uint256,uint256)": {
        "notice": "Loops over the user's tokens looking for one that belongs to a product and a specific range"
      },
      "mintedTokensInProduct(uint256)": {
        "notice": "Returns the number of tokens inside a product"
      },
      "ownsTokenInProduct(address,uint256)": {
        "notice": "Wrapper for the validator, searching for the entire product"
      },
      "ownsTokenInRange(address,uint256)": {
        "notice": "Wrapper for the validator, searching for the entire range"
      },
      "productToToken(uint256,uint256)": {
        "notice": "This function will search in a collection for a especific token and return its value"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Allow us to renounce to a role"
      },
      "revokeRole(bytes32,address)": {
        "notice": "Allow us to revoke a role to an account"
      },
      "tokenByProduct(uint256,uint256)": {
        "notice": "This function allow us to see the position of creation of a token"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "This functions allow us to check is a token is owned by an account"
      },
      "tokenToProduct(uint256)": {
        "notice": "This function allow us to locaste the collection & range of a token "
      },
      "tokenToProductIndex(uint256)": {
        "notice": "This function allow us to know the index of the collection that contains the token"
      }
    },
    "notice": "You can use this contract to manage information about the token and the products  ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10261,
        "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage721)10245_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(product)10134_storage)dyn_storage": {
        "base": "t_struct(product)10134_storage",
        "encoding": "dynamic_array",
        "label": "struct product[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(range)10122_storage)dyn_storage": {
        "base": "t_struct(range)10122_storage",
        "encoding": "dynamic_array",
        "label": "struct range[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3640_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)7394_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3639,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3325_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(AppStorage721)10245_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage721",
        "members": [
          {
            "astId": 10136,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 10138,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 10142,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 10146,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 10150,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 10156,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 10162,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 10166,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10169,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_allTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 10173,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10178,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_roles",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)7394_storage)"
          },
          {
            "astId": 10183,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_roleMembers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)3640_storage)"
          },
          {
            "astId": 10185,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "baseURI",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 10187,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "factoryAddress",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 10189,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "royaltyFee",
            "offset": 20,
            "slot": "13",
            "type": "t_uint16"
          },
          {
            "astId": 10193,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "products",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(product)10134_storage)dyn_storage"
          },
          {
            "astId": 10197,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "ranges",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_struct(range)10122_storage)dyn_storage"
          },
          {
            "astId": 10201,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokenToProduct",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10205,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokenToRange",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10209,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "uniqueTokenURI",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10213,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "productURI",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10217,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "appendTokenIndexToProductURI",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10219,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "appendTokenIndexToBaseURI",
            "offset": 0,
            "slot": "21",
            "type": "t_bool"
          },
          {
            "astId": 10224,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokensByProduct",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
          },
          {
            "astId": 10226,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "contractMetadataURI",
            "offset": 0,
            "slot": "23",
            "type": "t_string_storage"
          },
          {
            "astId": 10230,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeToProduct",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 10234,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_minted",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10238,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeURI",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 10242,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "appendTokenIndexToRangeURI",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 10244,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_metadataExtension",
            "offset": 0,
            "slot": "28",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "928"
      },
      "t_struct(RoleData)7394_storage": {
        "encoding": "inplace",
        "label": "struct RoleData",
        "members": [
          {
            "astId": 7391,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7393,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3320,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3324,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(product)10134_storage": {
        "encoding": "inplace",
        "label": "struct product",
        "members": [
          {
            "astId": 10124,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "startingToken",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10126,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "endingToken",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10128,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10130,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 10133,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(range)10122_storage": {
        "encoding": "inplace",
        "label": "struct range",
        "members": [
          {
            "astId": 10109,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeStart",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10111,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10113,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "tokensAllowed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10115,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "mintableTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10117,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "lockedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10119,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 10121,
            "contract": "contracts/tokens/RAIR Token Facets/ProductFacet.sol:RAIRProductFacet",
            "label": "rangeName",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}